<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Change Password - StarForge</title>
  <link rel="stylesheet" href="/css/user/profileDashboard.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <style>
    .password-form-container {
      background: white;
      border-radius: 16px;
      padding: 2.5rem;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
      border: 1px solid #e5e7eb;
      max-width: 600px;
      margin: 0 auto;
    }

    .password-form-header {
      text-align: center;
      margin-bottom: 2rem;
    }

    .password-form-header h2 {
      font-size: 1.75rem;
      font-weight: 600;
      color: #222;
      margin-bottom: 0.5rem;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.75rem;
    }

    .password-form-header h2 i {
      color: #fca120;
      font-size: 1.5rem;
    }

    .password-form-header p {
      color: #6b7280;
      font-size: 1rem;
      margin: 0;
    }

    .password-form {
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
    }

    .form-group {
      position: relative;
    }

    .form-label {
      display: block;
      font-weight: 600;
      color: #374151;
      margin-bottom: 0.75rem;
      font-size: 0.95rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .form-label i {
      color: #fca120;
      width: 16px;
    }

    .password-input-container {
      position: relative;
    }

    .form-input {
      width: 100%;
      padding: 1rem 3rem 1rem 1rem;
      border: 2px solid #e5e7eb;
      border-radius: 10px;
      font-size: 1rem;
      transition: all 0.3s ease;
      background: #fafbfc;
    }

    .form-input:focus {
      outline: none;
      border-color: #fca120;
      box-shadow: 0 0 0 3px rgba(252, 161, 32, 0.1);
      background: white;
    }

    .form-input.is-invalid {
      border-color: #ef4444;
      background: #fef2f2;
    }

    .form-input.is-valid {
      border-color: #10b981;
      background: #f0fdf4;
    }

    .password-toggle {
      position: absolute;
      right: 1rem;
      top: 50%;
      transform: translateY(-50%);
      background: none;
      border: none;
      color: #6b7280;
      cursor: pointer;
      padding: 0.25rem;
      border-radius: 4px;
      transition: color 0.3s ease;
    }

    .password-toggle:hover {
      color: #fca120;
    }

    .password-strength {
      margin-top: 0.75rem;
      display: none;
    }

    .password-strength.show {
      display: block;
    }

    .strength-bar {
      height: 4px;
      background: #e5e7eb;
      border-radius: 2px;
      overflow: hidden;
      margin-bottom: 0.5rem;
    }

    .strength-fill {
      height: 100%;
      transition: all 0.3s ease;
      border-radius: 2px;
    }

    .strength-weak .strength-fill {
      width: 33%;
      background: #ef4444;
    }

    .strength-medium .strength-fill {
      width: 66%;
      background: #f59e0b;
    }

    .strength-strong .strength-fill {
      width: 100%;
      background: #10b981;
    }

    .strength-text {
      font-size: 0.85rem;
      font-weight: 500;
    }

    .strength-weak .strength-text {
      color: #ef4444;
    }

    .strength-medium .strength-text {
      color: #f59e0b;
    }

    .strength-strong .strength-text {
      color: #10b981;
    }

    .password-requirements {
      margin-top: 0.75rem;
      padding: 1rem;
      background: #f9fafb;
      border-radius: 8px;
      border: 1px solid #e5e7eb;
      display: none;
    }

    .password-requirements.show {
      display: block;
    }

    .requirements-title {
      font-size: 0.85rem;
      font-weight: 600;
      color: #374151;
      margin-bottom: 0.5rem;
    }

    .requirements-list {
      list-style: none;
      padding: 0;
      margin: 0;
      display: flex;
      flex-direction: column;
      gap: 0.25rem;
    }

    .requirement-item {
      font-size: 0.8rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: #6b7280;
      transition: color 0.3s ease;
    }

    .requirement-item.met {
      color: #10b981;
    }

    .requirement-item i {
      width: 12px;
      font-size: 0.75rem;
    }

    .validation-message {
      margin-top: 0.5rem;
      font-size: 0.85rem;
      font-weight: 500;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .validation-message.error {
      color: #ef4444;
    }

    .validation-message.success {
      color: #10b981;
    }

    .submit-btn {
      background: linear-gradient(135deg, #fca120 0%, #e8940f 100%);
      color: white;
      border: none;
      padding: 1rem 2rem;
      border-radius: 10px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      font-size: 1rem;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
      box-shadow: 0 4px 16px rgba(252, 161, 32, 0.3);
      margin-top: 1rem;
    }

    .submit-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 24px rgba(252, 161, 32, 0.4);
    }

    .submit-btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
    }

    .submit-btn.loading {
      pointer-events: none;
    }

    .submit-btn.loading::after {
      content: '';
      width: 16px;
      height: 16px;
      border: 2px solid transparent;
      border-top-color: currentColor;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin-left: 0.5rem;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .security-tips {
      background: #fef7ed;
      border: 1px solid #fed7aa;
      border-radius: 12px;
      padding: 1.5rem;
      margin-top: 2rem;
    }

    .security-tips h3 {
      font-size: 1.1rem;
      font-weight: 600;
      color: #ea580c;
      margin-bottom: 1rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .security-tips ul {
      list-style: none;
      padding: 0;
      margin: 0;
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    .security-tips li {
      font-size: 0.9rem;
      color: #9a3412;
      display: flex;
      align-items: flex-start;
      gap: 0.5rem;
      line-height: 1.5;
    }

    .security-tips li i {
      color: #ea580c;
      margin-top: 0.125rem;
      flex-shrink: 0;
    }

    @media (max-width: 768px) {
      .password-form-container {
        padding: 2rem;
        margin: 1rem;
      }

      .password-form-header h2 {
        font-size: 1.5rem;
      }

      .form-input {
        padding: 0.875rem 2.5rem 0.875rem 0.875rem;
      }

      .password-toggle {
        right: 0.75rem;
      }
    }

    @media (max-width: 576px) {
      .password-form-container {
        padding: 1.5rem;
      }

      .password-form-header h2 {
        font-size: 1.25rem;
        flex-direction: column;
        gap: 0.5rem;
      }

      .security-tips {
        padding: 1rem;
      }
    }
  </style>
</head>
<body>
  <%- include('../partials/user/profileNavbar', { user, cartCount: cartCount || 0 }) %>

  <%- include('../partials/user/profileSidebar', { user, currentPage: 'password' }) %>

  <main class="main-content">
    <div class="content-wrapper">
      <div class="profile-container">
        <header class="page-header">
          <div>
            <h1 class="page-title">Change Password</h1>
            <div class="breadcrumb">
              <a href="/LoadProfile">My Profile</a> / Change Password
            </div>
          </div>
        </header>

        <% if (typeof error !== 'undefined' && error) { %>
          <div class="alert alert-error" id="errorAlert">
            <i class="fas fa-exclamation-circle"></i>
            <span><%= error %></span>
            <button type="button" class="alert-close" onclick="closeAlert('errorAlert')">
              <i class="fas fa-times"></i>
            </button>
          </div>
        <% } %>

        <% if (typeof success !== 'undefined' && success) { %>
          <div class="alert alert-success" id="successAlert">
            <i class="fas fa-check-circle"></i>
            <span><%= success %></span>
            <button type="button" class="alert-close" onclick="closeAlert('successAlert')">
              <i class="fas fa-times"></i>
            </button>
          </div>
        <% } %>

        <div class="password-form-container">
          <div class="password-form-header">
            <h2>
              <i class="fas fa-lock"></i>
              Change Password
            </h2>
            <p>Keep your account secure with a strong password</p>
          </div>

          <form method="POST" action="/changePassword" class="password-form" id="changePasswordForm">
            <div class="form-group">
              <label for="currentPassword" class="form-label">
                <i class="fas fa-key"></i>
                Current Password
              </label>
              <div class="password-input-container">
                <input 
                  type="password" 
                  id="currentPassword" 
                  name="currentPassword" 
                  class="form-input" 
                  required
                  autocomplete="current-password"
                >
                <button type="button" class="password-toggle" onclick="togglePassword('currentPassword')">
                  <i class="fas fa-eye"></i>
                </button>
              </div>
              <div class="validation-message" id="currentPasswordMessage"></div>
            </div>

            <div class="form-group">
              <label for="newPassword" class="form-label">
                <i class="fas fa-lock"></i>
                New Password
              </label>
              <div class="password-input-container">
                <input 
                  type="password" 
                  id="newPassword" 
                  name="newPassword" 
                  class="form-input" 
                  required
                  autocomplete="new-password"
                >
                <button type="button" class="password-toggle" onclick="togglePassword('newPassword')">
                  <i class="fas fa-eye"></i>
                </button>
              </div>
              
              <div class="password-strength" id="passwordStrength">
                <div class="strength-bar">
                  <div class="strength-fill"></div>
                </div>
                <div class="strength-text">Password strength</div>
              </div>

              <div class="password-requirements" id="passwordRequirements">
                <div class="requirements-title">Password must contain:</div>
                <ul class="requirements-list">
                  <li class="requirement-item" id="req-length">
                    <i class="fas fa-times"></i>
                    At least 8 characters
                  </li>
                  <li class="requirement-item" id="req-uppercase">
                    <i class="fas fa-times"></i>
                    One uppercase letter
                  </li>
                  <li class="requirement-item" id="req-lowercase">
                    <i class="fas fa-times"></i>
                    One lowercase letter
                  </li>
                  <li class="requirement-item" id="req-number">
                    <i class="fas fa-times"></i>
                    One number
                  </li>
                  <li class="requirement-item" id="req-special">
                    <i class="fas fa-times"></i>
                    One special character
                  </li>
                </ul>
              </div>
              
              <div class="validation-message" id="newPasswordMessage"></div>
            </div>

            <div class="form-group">
              <label for="confirmPassword" class="form-label">
                <i class="fas fa-check-circle"></i>
                Confirm New Password
              </label>
              <div class="password-input-container">
                <input 
                  type="password" 
                  id="confirmPassword" 
                  name="confirmPassword" 
                  class="form-input" 
                  required
                  autocomplete="new-password"
                >
                <button type="button" class="password-toggle" onclick="togglePassword('confirmPassword')">
                  <i class="fas fa-eye"></i>
                </button>
              </div>
              <div class="validation-message" id="confirmPasswordMessage"></div>
            </div>

            <button type="submit" class="submit-btn" id="submitBtn">
              <i class="fas fa-save"></i>
              Change Password
            </button>
          </form>

          <div class="security-tips">
            <h3>
              <i class="fas fa-shield-alt"></i>
              Security Tips
            </h3>
            <ul>
              <li>
                <i class="fas fa-check"></i>
                Use a unique password that you don't use elsewhere
              </li>
              <li>
                <i class="fas fa-check"></i>
                Avoid using personal information in your password
              </li>
              <li>
                <i class="fas fa-check"></i>
                Consider using a password manager
              </li>
              <li>
                <i class="fas fa-check"></i>
                Change your password regularly
              </li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  </main>

  <script>
    function togglePassword(fieldId) {
      const field = document.getElementById(fieldId);
      const toggle = field.nextElementSibling.querySelector('i');
      
      if (field.type === 'password') {
        field.type = 'text';
        toggle.classList.remove('fa-eye');
        toggle.classList.add('fa-eye-slash');
      } else {
        field.type = 'password';
        toggle.classList.remove('fa-eye-slash');
        toggle.classList.add('fa-eye');
      }
    }

    function checkPasswordStrength(password) {
      let score = 0;
      const requirements = {
        length: password.length >= 8,
        uppercase: /[A-Z]/.test(password),
        lowercase: /[a-z]/.test(password),
        number: /\d/.test(password),
        special: /[!@#$%^&*(),.?":{}|<>]/.test(password)
      };

      Object.keys(requirements).forEach(req => {
        const element = document.getElementById(`req-${req}`);
        const icon = element.querySelector('i');
        
        if (requirements[req]) {
          element.classList.add('met');
          icon.classList.remove('fa-times');
          icon.classList.add('fa-check');
          score++;
        } else {
          element.classList.remove('met');
          icon.classList.remove('fa-check');
          icon.classList.add('fa-times');
        }
      });

      const strengthElement = document.getElementById('passwordStrength');
      const strengthText = strengthElement.querySelector('.strength-text');
      
      strengthElement.className = 'password-strength show';
      
      if (score < 3) {
        strengthElement.classList.add('strength-weak');
        strengthText.textContent = 'Weak password';
      } else if (score < 5) {
        strengthElement.classList.add('strength-medium');
        strengthText.textContent = 'Medium password';
      } else {
        strengthElement.classList.add('strength-strong');
        strengthText.textContent = 'Strong password';
      }

      return score >= 4;
    }

    document.addEventListener('DOMContentLoaded', function() {
      const newPasswordField = document.getElementById('newPassword');
      const confirmPasswordField = document.getElementById('confirmPassword');
      const currentPasswordField = document.getElementById('currentPassword');
      const requirementsElement = document.getElementById('passwordRequirements');
      const form = document.getElementById('changePasswordForm');
      const submitBtn = document.getElementById('submitBtn');

      newPasswordField.addEventListener('focus', function() {
        requirementsElement.classList.add('show');
      });

      newPasswordField.addEventListener('blur', function() {
        if (!this.value) {
          requirementsElement.classList.remove('show');
          document.getElementById('passwordStrength').classList.remove('show');
        }
      });

      newPasswordField.addEventListener('input', function() {
        const password = this.value;
        const messageElement = document.getElementById('newPasswordMessage');
        
        if (password) {
          const isStrong = checkPasswordStrength(password);
          
          if (isStrong) {
            this.classList.remove('is-invalid');
            this.classList.add('is-valid');
            messageElement.className = 'validation-message success';
            messageElement.innerHTML = '<i class="fas fa-check"></i> Password meets requirements';
          } else {
            this.classList.remove('is-valid');
            this.classList.add('is-invalid');
            messageElement.className = 'validation-message error';
            messageElement.innerHTML = '<i class="fas fa-times"></i> Password does not meet all requirements';
          }
        } else {
          this.classList.remove('is-valid', 'is-invalid');
          messageElement.textContent = '';
        }

        if (confirmPasswordField.value) {
          validateConfirmPassword();
        }
      });

      function validateConfirmPassword() {
        const password = newPasswordField.value;
        const confirmPassword = confirmPasswordField.value;
        const messageElement = document.getElementById('confirmPasswordMessage');

        if (confirmPassword) {
          if (password === confirmPassword) {
            confirmPasswordField.classList.remove('is-invalid');
            confirmPasswordField.classList.add('is-valid');
            messageElement.className = 'validation-message success';
            messageElement.innerHTML = '<i class="fas fa-check"></i> Passwords match';
          } else {
            confirmPasswordField.classList.remove('is-valid');
            confirmPasswordField.classList.add('is-invalid');
            messageElement.className = 'validation-message error';
            messageElement.innerHTML = '<i class="fas fa-times"></i> Passwords do not match';
          }
        } else {
          confirmPasswordField.classList.remove('is-valid', 'is-invalid');
          messageElement.textContent = '';
        }
      }

      confirmPasswordField.addEventListener('input', validateConfirmPassword);

      form.addEventListener('submit', function(e) {
        e.preventDefault();

        const currentPassword = currentPasswordField.value;
        const newPassword = newPasswordField.value;
        const confirmPassword = confirmPasswordField.value;

        let isValid = true;

        if (!currentPassword) {
          currentPasswordField.classList.add('is-invalid');
          document.getElementById('currentPasswordMessage').className = 'validation-message error';
          document.getElementById('currentPasswordMessage').innerHTML = '<i class="fas fa-times"></i> Current password is required';
          isValid = false;
        }

        if (!checkPasswordStrength(newPassword)) {
          isValid = false;
        }

        if (newPassword !== confirmPassword) {
          isValid = false;
        }

        if (currentPassword === newPassword) {
          newPasswordField.classList.add('is-invalid');
          document.getElementById('newPasswordMessage').className = 'validation-message error';
          document.getElementById('newPasswordMessage').innerHTML = '<i class="fas fa-times"></i> New password must be different from current password';
          isValid = false;
        }

        if (isValid) {
          submitBtn.classList.add('loading');
          submitBtn.disabled = true;
          submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Changing Password...';

          this.submit();
        }
      });
    });

    function closeAlert(alertId) {
      const alert = document.getElementById(alertId);
      if (alert) {
        alert.style.opacity = '0';
        alert.style.transform = 'translateY(-10px)';
        setTimeout(() => {
          alert.remove();
        }, 300);
      }
    }

    document.addEventListener('DOMContentLoaded', function() {
      const alerts = document.querySelectorAll('.alert');
      alerts.forEach(alert => {
        setTimeout(() => {
          if (alert.parentNode) {
            closeAlert(alert.id);
          }
        }, 5000);
      });
    });
  </script>
</body>
</html>