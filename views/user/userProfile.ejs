<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>My Profile - StarForge</title>
  <link rel="stylesheet" href="/css/user/profileDashboard.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    .profile-overview {
      background: linear-gradient(135deg, #fca120 0%, #e8940f 100%);
      border-radius: 16px;
      padding: 2.5rem;
      margin-bottom: 2rem;
      color: white;
      position: relative;
      overflow: hidden;
      box-shadow: 0 8px 32px rgba(252, 161, 32, 0.3);
    }

    .profile-overview::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -20%;
      width: 300px;
      height: 300px;
      background: rgba(255, 255, 255, 0.1);
      border-radius: 50%;
      transform: rotate(45deg);
    }

    .profile-header {
      display: flex;
      align-items: center;
      gap: 2rem;
      position: relative;
      z-index: 2;
    }

    .profile-image-container {
      position: relative;
      flex-shrink: 0;
    }

    .profile-image {
      width: 140px;
      height: 140px;
      border-radius: 50%;
      object-fit: cover;
      border: 4px solid rgba(255, 255, 255, 0.3);
      background: rgba(255, 255, 255, 0.15);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 3.5rem;
      font-weight: 700;
      color: white;
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
    }

    .profile-image img {
      width: 100%;
      height: 100%;
      border-radius: 50%;
      object-fit: cover;
    }

    .image-upload-overlay {
      position: absolute;
      bottom: 5px;
      right: 5px;
      background: #333;
      color: white;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.3s ease;
      border: 3px solid white;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
    }

    .image-upload-overlay:hover {
      background: #555;
      transform: scale(1.1);
    }

    .profile-info h1 {
      margin: 0 0 0.5rem 0;
      font-size: 2.75rem;
      font-weight: 700;
      text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .profile-info p {
      font-size: 1.1rem;
      opacity: 0.9;
      margin-bottom: 1.5rem;
    }

    .profile-stats {
      display: flex;
      gap: 2.5rem;
      margin-top: 1.5rem;
    }

    .stat-item {
      text-align: center;
      background: rgba(255, 255, 255, 0.15);
      padding: 1rem 1.5rem;
      border-radius: 12px;
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .stat-value {
      display: block;
      font-size: 1.75rem;
      font-weight: 700;
      margin-bottom: 0.25rem;
    }

    .stat-label {
      font-size: 0.9rem;
      opacity: 0.9;
      font-weight: 500;
    }

    .quick-actions {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 1.5rem;
      margin-bottom: 2rem;
    }

    .action-card {
      background: white;
      border-radius: 16px;
      padding: 2rem;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
      transition: all 0.3s ease;
      border: 1px solid #e5e7eb;
      position: relative;
      overflow: hidden;
    }

    .action-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 4px;
      background: linear-gradient(90deg, #fca120, #e8940f);
      transform: scaleX(0);
      transition: transform 0.3s ease;
    }

    .action-card:hover::before {
      transform: scaleX(1);
    }

    .action-card:hover {
      transform: translateY(-4px);
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);
    }

    .action-header {
      display: flex;
      align-items: center;
      gap: 1rem;
      margin-bottom: 1.5rem;
    }

    .action-icon {
      width: 56px;
      height: 56px;
      border-radius: 16px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.75rem;
      color: white;
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);
    }

    .action-icon.wallet { background: linear-gradient(135deg, #10b981, #059669); }
    .action-icon.orders { background: linear-gradient(135deg, #3b82f6, #1d4ed8); }
    .action-icon.addresses { background: linear-gradient(135deg, #8b5cf6, #7c3aed); }
    .action-icon.wishlist { background: linear-gradient(135deg, #ef4444, #dc2626); }

    .action-title {
      font-size: 1.3rem;
      font-weight: 600;
      color: #222;
      margin: 0;
    }

    .action-description {
      color: #6b7280;
      font-size: 0.95rem;
      margin-bottom: 1.5rem;
      line-height: 1.5;
    }

    .action-button {
      background: linear-gradient(135deg, #fca120 0%, #e8940f 100%);
      color: white;
      border: none;
      padding: 0.875rem 1.75rem;
      border-radius: 10px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      font-size: 0.95rem;
      box-shadow: 0 4px 16px rgba(252, 161, 32, 0.3);
    }

    .action-button:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 24px rgba(252, 161, 32, 0.4);
      color: white;
      text-decoration: none;
    }

    .profile-details-section {
      background: white;
      border-radius: 16px;
      padding: 2.5rem;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
      margin-bottom: 2rem;
      border: 1px solid #e5e7eb;
    }

    .section-title {
      font-size: 1.75rem;
      font-weight: 600;
      color: #222;
      margin-bottom: 2rem;
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }

    .section-title i {
      color: #fca120;
      font-size: 1.5rem;
    }

    .detail-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
      gap: 1.5rem;
    }

    .detail-item {
      padding: 1.5rem;
      border: 2px solid #f3f4f6;
      border-radius: 12px;
      background: #fafbfc;
      transition: all 0.3s ease;
    }

    .detail-item:hover {
      border-color: #fca120;
      background: #fef7ed;
      transform: translateY(-2px);
    }

    .detail-label {
      font-weight: 600;
      color: #374151;
      font-size: 0.9rem;
      margin-bottom: 0.75rem;
      display: block;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .detail-value {
      color: #222;
      font-size: 1.1rem;
      font-weight: 500;
    }

    .edit-profile-btn {
      background: linear-gradient(135deg, #fca120 0%, #e8940f 100%);
      color: white;
      border: none;
      padding: 1rem 2.5rem;
      border-radius: 10px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      margin-top: 2rem;
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      font-size: 1rem;
      box-shadow: 0 4px 16px rgba(252, 161, 32, 0.3);
    }

    .edit-profile-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 24px rgba(252, 161, 32, 0.4);
    }

    .modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1050;
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s ease;
      backdrop-filter: blur(4px);
    }

    .modal-overlay.active {
      opacity: 1;
      visibility: visible;
    }

    .modal-content {
      background: white;
      border-radius: 16px;
      padding: 0;
      width: 90%;
      max-width: 500px;
      max-height: 90vh;
      overflow-y: auto;
      transform: scale(0.9);
      transition: transform 0.3s ease;
      box-shadow: 0 25px 50px rgba(0, 0, 0, 0.25);
    }

    .modal-overlay.active .modal-content {
      transform: scale(1);
    }

    .modal-header {
      background: linear-gradient(135deg, #fca120 0%, #e8940f 100%);
      color: white;
      padding: 1.5rem;
      border-radius: 16px 16px 0 0;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }

    .modal-title {
      font-size: 1.25rem;
      font-weight: 600;
      margin: 0;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .close-modal {
      background: none;
      border: none;
      color: white;
      font-size: 1.5rem;
      cursor: pointer;
      padding: 0;
      width: 30px;
      height: 30px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 4px;
      transition: background 0.2s ease;
    }

    .close-modal:hover {
      background: rgba(255, 255, 255, 0.2);
    }

    .modal-content form {
      padding: 2rem;
    }

    .form-group {
      margin-bottom: 1.5rem;
    }

    .form-label {
      display: block;
      font-weight: 600;
      color: #374151;
      margin-bottom: 0.5rem;
      font-size: 0.95rem;
    }

    .form-input {
      width: 100%;
      padding: 0.875rem 1rem;
      border: 2px solid #e5e7eb;
      border-radius: 8px;
      font-size: 1rem;
      transition: all 0.3s ease;
      background: #fff;
    }

    .form-input:focus {
      outline: none;
      border-color: #fca120;
      box-shadow: 0 0 0 3px rgba(252, 161, 32, 0.1);
    }

    .form-input.is-invalid {
      border-color: #ef4444;
      background: #fef2f2;
    }

    .form-input.is-valid {
      border-color: #10b981;
      background: #f0fdf4;
    }

    .invalid-feedback {
      display: block;
      color: #ef4444;
      font-size: 0.875rem;
      margin-top: 0.25rem;
      font-weight: 500;
    }

    .modal-actions {
      display: flex;
      gap: 1rem;
      justify-content: flex-end;
      padding-top: 1rem;
      border-top: 1px solid #e5e7eb;
    }

    .btn-primary {
      background: linear-gradient(135deg, #fca120 0%, #e8940f 100%);
      color: white;
      border: none;
      padding: 0.75rem 1.5rem;
      border-radius: 8px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      box-shadow: 0 2px 8px rgba(252, 161, 32, 0.3);
    }

    .btn-primary:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(252, 161, 32, 0.4);
    }

    .btn-secondary {
      background: #6b7280;
      color: white;
      border: none;
      padding: 0.75rem 1.5rem;
      border-radius: 8px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .btn-secondary:hover {
      background: #4b5563;
      transform: translateY(-1px);
    }

    .file-upload-area {
      border: 2px dashed #d1d5db;
      border-radius: 12px;
      padding: 2.5rem;
      text-align: center;
      transition: all 0.3s ease;
      cursor: pointer;
      background: #fafbfc;
    }

    .file-upload-area:hover {
      border-color: #fca120;
      background: #fef7ed;
    }

    .file-upload-area.dragover {
      border-color: #fca120;
      background: #fef7ed;
      transform: scale(1.02);
    }

    .upload-icon {
      font-size: 3.5rem;
      color: #d1d5db;
      margin-bottom: 1rem;
    }

    .upload-text {
      color: #374151;
      margin-bottom: 0.5rem;
      font-weight: 500;
      font-size: 1.1rem;
    }

    .upload-hint {
      font-size: 0.9rem;
      color: #6b7280;
    }

    #profileImageInput {
      display: none;
    }

    .toast {
      position: fixed;
      bottom: 2rem;
      right: 2rem;
      background: #10b981;
      color: white;
      padding: 1rem 1.5rem;
      border-radius: 10px;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
      transform: translateX(100%);
      transition: transform 0.3s ease;
      z-index: 1051;
      font-weight: 500;
    }

    .toast.show {
      transform: translateX(0);
    }

    .toast.error {
      background: #ef4444;
    }

    @media (max-width: 768px) {
      .profile-overview {
        padding: 2rem;
      }

      .profile-header {
        flex-direction: column;
        text-align: center;
        gap: 1.5rem;
      }

      .profile-image {
        width: 120px;
        height: 120px;
        font-size: 3rem;
      }

      .profile-info h1 {
        font-size: 2.25rem;
      }

      .profile-stats {
        justify-content: center;
        gap: 1.5rem;
      }

      .stat-item {
        padding: 0.75rem 1rem;
      }

      .quick-actions {
        grid-template-columns: 1fr;
      }

      .detail-grid {
        grid-template-columns: 1fr;
      }

      .profile-details-section {
        padding: 2rem;
      }

      .section-title {
        font-size: 1.5rem;
      }

      .modal-content {
        width: 95%;
        margin: 1rem;
      }

      .modal-actions {
        flex-direction: column;
        gap: 0.5rem;
      }

      .modal-actions .btn-primary,
      .modal-actions .btn-secondary {
        width: 100%;
        justify-content: center;
      }
    }

    @media (max-width: 576px) {
      .profile-overview {
        padding: 1.5rem;
      }

      .profile-info h1 {
        font-size: 2rem;
      }

      .stat-value {
        font-size: 1.5rem;
      }

      .action-card {
        padding: 1.5rem;
      }

      .profile-details-section {
        padding: 1.5rem;
      }
    }

    body.modal-open {
      overflow: hidden;
    }
  </style>
</head>

<body>
  <%- include('../partials/user/profileNavbar', { user, cartCount: cartCount || 0 }) %>

  <%- include('../partials/user/profileSidebar', { user, currentPage: 'profile' }) %>

  <main class="main-content">
    <div class="content-wrapper">
      <div class="profile-container">
        
        <div class="profile-overview">
          <div class="profile-header">
            <div class="profile-image-container">
              <div class="profile-image">
                <% if (user.profileImage) { %>
                  <img src="/uploads/profiles/<%= user.profileImage %>" alt="Profile Picture" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                  <div style="display: none; width: 100%; height: 100%; align-items: center; justify-content: center; font-size: 3rem; font-weight: bold; color: white;">
                    <%= user.fullName.split(' ').map(n => n[0]).join('') %>
                  </div>
                <% } else { %>
                  <%= user.fullName.split(' ').map(n => n[0]).join('') %>
                <% } %>
              </div>
              <div class="image-upload-overlay" onclick="openImageUploadModal()">
                <i class="fas fa-camera"></i>
              </div>
            </div>
            <div class="profile-info">
              <h1><%= user.fullName %></h1>
              <p><%= user.email %></p>
              <div class="profile-stats">
                <div class="stat-item">
                  <span class="stat-value"><%= orderCount || 0 %></span>
                  <span class="stat-label">Orders</span>
                </div>
                <div class="stat-item">
                  <span class="stat-value">₹<%= (user.wallet?.balance || 0).toLocaleString('en-IN') %></span>
                  <span class="stat-label">Wallet</span>
                </div>
                <div class="stat-item">
                  <span class="stat-value"><%= wishlistCount || 0 %></span>
                  <span class="stat-label">Wishlist</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="profile-details-section">
          <h2 class="section-title">
            <i class="fas fa-user"></i>
            Personal Information
          </h2>
          <div class="detail-grid">
            <div class="detail-item">
              <span class="detail-label">Full Name</span>
              <span class="detail-value"><%= user.fullName %></span>
            </div>
            <div class="detail-item">
              <span class="detail-label">Email Address</span>
              <span class="detail-value"><%= user.email %></span>
            </div>
            <div class="detail-item">
              <span class="detail-label">Mobile Number</span>
              <span class="detail-value"><%= user.mobile || 'Not provided' %></span>
            </div>
            <div class="detail-item">
              <span class="detail-label">Member Since</span>
              <span class="detail-value"><%= new Date(user.createdAt).toLocaleDateString('en-GB', { day: '2-digit', month: 'long', year: 'numeric' }) %></span>
            </div>
            <div class="detail-item">
              <span class="detail-label">Referral Code</span>
              <span class="detail-value"><%= user.referralCode || 'Not available' %></span>
            </div>
            <div class="detail-item">
              <span class="detail-label">Account Status</span>
              <span class="detail-value">
                <% if (user.isActive === true) { %>
                  <span style="color: #28a745; font-weight: 600;">
                    <i class="fas fa-check-circle"></i> Active
                  </span>
                <% } else { %>
                  <span style="color: #dc3545; font-weight: 600;">
                    <i class="fas fa-times-circle"></i> Inactive
                  </span>
                <% } %>
              </span>
            </div>
          </div>
          <button type="button" class="edit-profile-btn" onclick="openEditProfileModal()">
            <i class="fas fa-edit"></i> Edit Profile
          </button>
        </div>

      </div>
    </div>
  </main>

  <div id="editProfileModal" class="modal-overlay">
    <div class="modal-content">
      <div class="modal-header">
        <h2 class="modal-title">
          <i class="fas fa-edit"></i>
          Edit Profile
        </h2>
        <button class="close-modal" onclick="closeEditProfileModal()">
          <i class="fas fa-times"></i>
        </button>
      </div>
      <form id="editProfileForm" action="/user/updateProfile" method="post" enctype="multipart/form-data" novalidate>
        <div class="form-group">
          <label class="form-label">Full Name *</label>
          <input type="text" name="name" class="form-input" value="<%= user.fullName %>" required>
          <div class="invalid-feedback"></div>
        </div>
        <div class="form-group">
          <label class="form-label">Email Address *</label>
          <input type="email" name="email" class="form-input" value="<%= user.email %>" required>
          <div class="invalid-feedback"></div>
        </div>
        <div class="form-group">
          <label class="form-label">Mobile Number</label>
          <input type="text" name="mobile" class="form-input" value="<%= user.mobile || '' %>" pattern="[0-9]{10}" maxlength="10" title="Please enter a valid 10-digit mobile number">
          <div class="invalid-feedback"></div>
        </div>
        <div class="form-group">
          <label class="form-label">Profile Image</label>
          <div class="file-upload-area" onclick="document.getElementById('profileImageEdit').click()">
            <div class="upload-icon">
              <i class="fas fa-cloud-upload-alt"></i>
            </div>
            <div class="upload-text">Click to select or drag and drop</div>
            <div class="upload-hint">JPG, PNG or GIF (max 5MB) - Optional</div>
          </div>
          <input type="file" id="profileImageEdit" name="profileImage" accept="image/*" style="display: none;">
        </div>
        <div class="modal-actions">
          <button type="button" class="btn-secondary" onclick="closeEditProfileModal()">Cancel</button>
          <button type="submit" class="btn-primary">
            <i class="fas fa-save"></i>
            Save Changes
          </button>
        </div>
      </form>
    </div>
  </div>

  <div id="imageUploadModal" class="modal-overlay">
    <div class="modal-content">
      <div class="modal-header">
        <h2 class="modal-title">
          <i class="fas fa-camera"></i>
          Update Profile Picture
        </h2>
        <button class="close-modal" onclick="closeImageUploadModal()">
          <i class="fas fa-times"></i>
        </button>
      </div>
      <form id="imageUploadForm" action="/profile/upload-image" method="POST" enctype="multipart/form-data">
        <div class="form-group">
          <div class="file-upload-area" onclick="document.getElementById('profileImageInput').click()">
            <div class="upload-icon">
              <i class="fas fa-cloud-upload-alt"></i>
            </div>
            <div class="upload-text">Click to select or drag and drop</div>
            <div class="upload-hint">JPG, PNG or GIF (max 5MB)</div>
          </div>
          <input type="file" id="profileImageInput" name="profileImage" accept="image/*" required>
        </div>
        <div class="modal-actions">
          <% if (user.profileImage) { %>
            <button type="button" class="btn-secondary" onclick="removeProfileImage()" style="background: #ef4444;">
              <i class="fas fa-trash"></i>
              Remove Picture
            </button>
          <% } %>
          <button type="button" class="btn-secondary" onclick="closeImageUploadModal()">Cancel</button>
          <button type="submit" class="btn-primary">
            <i class="fas fa-upload"></i>
            Upload Picture
          </button>
        </div>
      </form>
    </div>
  </div>

  <div id="toast" class="toast"></div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    function validateForm(form) {
      let isValid = true;
      const requiredFields = form.querySelectorAll('[required]');
      
      requiredFields.forEach(field => {
        const value = field.value.trim();
        const feedback = field.nextElementSibling;
        
        field.classList.remove('is-invalid', 'is-valid');
        if (feedback && feedback.classList.contains('invalid-feedback')) {
          feedback.textContent = '';
        }
        
        if (!value) {
          showFieldError(field, 'This field is required');
          isValid = false;
        } else if (field.type === 'email' && !isValidEmail(value)) {
          showFieldError(field, 'Please enter a valid email address');
          isValid = false;
        } else if (field.name === 'mobile' && value && !isValidMobile(value)) {
          showFieldError(field, 'Please enter a valid 10-digit mobile number');
          isValid = false;
        } else if (field.name === 'name' && value.length < 2) {
          showFieldError(field, 'Name must be at least 2 characters long');
          isValid = false;
        } else {
          field.classList.add('is-valid');
        }
      });
      
      return isValid;
    }
    
    function showFieldError(field, message) {
      field.classList.add('is-invalid');
      const feedback = field.nextElementSibling;
      if (feedback && feedback.classList.contains('invalid-feedback')) {
        feedback.textContent = message;
      }
    }
    
    function isValidEmail(email) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    }
    
    function isValidMobile(mobile) {
      const mobileRegex = /^[0-9]{10}$/;
      return mobileRegex.test(mobile);
    }

    function openEditProfileModal() {
      document.getElementById('editProfileModal').classList.add('active');
      document.body.classList.add('modal-open');
    }

    function closeEditProfileModal() {
      document.getElementById('editProfileModal').classList.remove('active');
      document.body.classList.remove('modal-open');
    }

    function openImageUploadModal() {
      document.getElementById('imageUploadModal').classList.add('active');
      document.body.classList.add('modal-open');
    }

    function closeImageUploadModal() {
      document.getElementById('imageUploadModal').classList.remove('active');
      document.body.classList.remove('modal-open');
    }

    function removeProfileImage() {
      if (confirm('Are you sure you want to remove your profile picture?')) {
        fetch('/profile/remove-image', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          }
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            showToast('Profile picture removed successfully!', 'success');
            setTimeout(() => {
              window.location.reload();
            }, 1500);
          } else {
            showToast(data.message || 'Failed to remove profile picture', 'error');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          showToast('An error occurred while removing profile picture', 'error');
        });
      }
    }

    function handleFileUpload(inputId, uploadAreaSelector) {
      document.getElementById(inputId).addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
          if (file.size > 5 * 1024 * 1024) {
            showToast('File size must be less than 5MB', 'error');
            e.target.value = '';
            return;
          }

          if (!file.type.startsWith('image/')) {
            showToast('Please select a valid image file', 'error');
            e.target.value = '';
            return;
          }

          const uploadArea = document.querySelector(uploadAreaSelector);
          uploadArea.innerHTML = `
            <div class="upload-icon">
              <i class="fas fa-check-circle" style="color: #28a745;"></i>
            </div>
            <div class="upload-text">${file.name}</div>
            <div class="upload-hint">Ready to upload</div>
          `;
        }
      });
    }

    handleFileUpload('profileImageInput', '#imageUploadModal .file-upload-area');
    handleFileUpload('profileImageEdit', '#editProfileModal .file-upload-area');

    const uploadArea = document.querySelector('.file-upload-area');
    
    uploadArea.addEventListener('dragover', function(e) {
      e.preventDefault();
      this.classList.add('dragover');
    });

    uploadArea.addEventListener('dragleave', function(e) {
      e.preventDefault();
      this.classList.remove('dragover');
    });

    uploadArea.addEventListener('drop', function(e) {
      e.preventDefault();
      this.classList.remove('dragover');
      
      const files = e.dataTransfer.files;
      if (files.length > 0) {
        document.getElementById('profileImageInput').files = files;
        document.getElementById('profileImageInput').dispatchEvent(new Event('change'));
      }
    });

    document.addEventListener('DOMContentLoaded', function() {
      const form = document.getElementById('editProfileForm');
      if (form) {
        const inputs = form.querySelectorAll('input');
        
        inputs.forEach(input => {
          input.addEventListener('blur', function() {
            if (this.hasAttribute('required') || this.value.trim()) {
              validateSingleField(this);
            }
          });
          
          input.addEventListener('input', function() {
            if (this.classList.contains('is-invalid')) {
              validateSingleField(this);
            }
          });
        });
      }
    });

    function validateSingleField(field) {
      const value = field.value.trim();
      field.classList.remove('is-invalid', 'is-valid');
      
      const feedback = field.nextElementSibling;
      if (feedback && feedback.classList.contains('invalid-feedback')) {
        feedback.textContent = '';
      }
      
      if (field.hasAttribute('required') && !value) {
        showFieldError(field, 'This field is required');
        return false;
      }
      
      if (field.type === 'email' && value && !isValidEmail(value)) {
        showFieldError(field, 'Please enter a valid email address');
        return false;
      }
      
      if (field.name === 'mobile' && value && !isValidMobile(value)) {
        showFieldError(field, 'Please enter a valid 10-digit mobile number');
        return false;
      }
      
      if (field.name === 'name' && value && value.length < 2) {
        showFieldError(field, 'Name must be at least 2 characters long');
        return false;
      }
      
      if (value) {
        field.classList.add('is-valid');
      }
      
      return true;
    }

    document.getElementById('editProfileForm').addEventListener('submit', function(e) {
      e.preventDefault();
      
      if (!validateForm(this)) {
        return;
      }
      
      const formData = new FormData(this);
      const submitBtn = this.querySelector('button[type="submit"]');
      
      submitBtn.disabled = true;
      submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
      
      fetch('/user/updateProfile', {
        method: 'POST',
        body: formData
      })
      .then(response => {
        if (response.redirected) {
          window.location.href = response.url;
        } else {
          return response.json();
        }
      })
      .then(data => {
        if (data && data.success === false) {
          showToast(data.message || 'Failed to update profile', 'error');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        showToast('An error occurred while updating profile', 'error');
      })
      .finally(() => {
        submitBtn.disabled = false;
        submitBtn.innerHTML = '<i class="fas fa-save"></i> Save Changes';
      });
    });

    document.getElementById('imageUploadForm').addEventListener('submit', function(e) {
      e.preventDefault();
      
      const formData = new FormData(this);
      const submitBtn = this.querySelector('button[type="submit"]');
      
      submitBtn.disabled = true;
      submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Uploading...';
      
      fetch('/profile/upload-image', {
        method: 'POST',
        body: formData
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          showToast('Profile picture updated successfully!', 'success');
          setTimeout(() => {
            window.location.reload();
          }, 1500);
        } else {
          showToast(data.message || 'Failed to upload image', 'error');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        showToast('An error occurred while uploading image', 'error');
      })
      .finally(() => {
        submitBtn.disabled = false;
        submitBtn.innerHTML = '<i class="fas fa-upload"></i> Upload Picture';
      });
    });

    function showToast(message, type = 'success') {
      const toast = document.getElementById('toast');
      toast.textContent = message;
      toast.className = `toast ${type}`;
      toast.classList.add('show');
      
      setTimeout(() => {
        toast.classList.remove('show');
      }, 3000);
    }

    document.addEventListener('click', function(e) {
      if (e.target.classList.contains('modal-overlay')) {
        e.target.classList.remove('active');
        document.body.classList.remove('modal-open');
      }
    });

    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape') {
        const activeModal = document.querySelector('.modal-overlay.active');
        if (activeModal) {
          activeModal.classList.remove('active');
          document.body.classList.remove('modal-open');
        }
      }
    });

    <% if (typeof success !== 'undefined' && success) { %>
      showToast('<%= success %>', 'success');
    <% } %>

    <% if (typeof error !== 'undefined' && error) { %>
      showToast('<%= error %>', 'error');
    <% } %>
  </script>
</body>

</html>