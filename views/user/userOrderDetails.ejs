<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Order Details - StarForge</title>
  <link rel="stylesheet" href="/css/user/userProfile.css">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    body {
      font-family: 'Segoe UI', sans-serif;
      background-color: #f8f9fa;
      margin: 0;
      padding: 0;
      padding-top: 6rem;
    }
    
    .main-content {
      max-width: 960px;
      margin: 2rem auto;
      padding: 2rem;
      background-color: #fff;
      border-radius: 8px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.05);
      padding-top: 1rem;
    }

    .top-navbar {
      background:#000000;
      padding: 1rem 2rem;
      box-shadow: 0 4px 20px rgba(0,0,0,0.15);
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      z-index: 1000;
      height: 70px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      backdrop-filter: blur(10px);
      border-bottom: 1px solid rgba(255,255,255,0.1);
  }

  .navbar-brand {
      color: white;
      font-size: 1.5rem;
      font-weight: 700;
      text-decoration: none;
      background-color:#fca120;
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
  }

  .navbar-user {
      color: white;
      display: flex;
      align-items: center;
  }

    h1 {
      margin-bottom: 1.5rem;
      font-size: 1.8rem;
      border-bottom: 1px solid #eee;
      padding-bottom: 0.5rem;
    }

    .order-summary {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: 1rem;
      margin-bottom: 2rem;
    }

    .order-summary p {
      margin: 0.3rem 0;
    }

    .label {
      color: #555;
      font-weight: 500;
    }

    .value {
      font-weight: 600;
      color: #111;
    }

    /* Coupon Summary Styles */
    .coupon-summary {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: 1rem;
      margin-bottom: 2rem;
      padding: 1rem;
      background-color: #f8f9fa;
      border-radius: 6px;
      border-left: 4px solid #28a745;
    }

    .coupon-summary p {
      margin: 0.3rem 0;
    }

    .coupon-code {
      background-color: #e8f5e9;
      color: #2e7d32;
      padding: 0.2rem 0.5rem;
      border-radius: 4px;
      font-family: 'Courier New', monospace;
      font-size: 0.9rem;
      font-weight: 700;
    }

    .discount-amount {
      color: #d32f2f;
      font-weight: 700;
    }

    .final-total {
      color: #1976d2;
      font-weight: 700;
      font-size: 1.05rem;
    }

    .no-coupon {
      color: #6c757d;
      font-style: italic;
    }

    .products-section {
      margin-top: 2rem;
    }

    .product-item {
      display: flex;
      align-items: center;
      padding: 1rem 0;
      border-bottom: 1px solid #eee;
    }

    .product-item:last-child {
      border-bottom: none;
    }

    .product-image {
      width: 64px;
      height: 64px;
      object-fit: cover;
      border-radius: 6px;
      margin-right: 1rem;
      border: 1px solid #ddd;
    }

    .product-info {
      flex-grow: 1;
    }

    .product-name {
      font-size: 1rem;
      font-weight: 600;
      margin-bottom: 0.2rem;
      color: #222;
    }

    .product-details {
      font-size: 0.9rem;
      color: #555;
    }

    .order-actions {
      margin-top: 2rem;
      padding-top: 1.5rem;
      border-top: 1px solid #eee;
      display: flex;
      gap: 1rem;
      justify-content: flex-start;
    }

    .action-btn {
      padding: 0.75rem 1.5rem;
      border: none;
      border-radius: 6px;
      font-size: 0.9rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
    }

    .btn-cancel {
      background-color: #dc3545;
      color: white;
    }

    .btn-cancel:hover {
      background-color: #c82333;
      transform: translateY(-1px);
    }

    .btn-return {
      background-color: #ffc107;
      color: #212529;
    }

    .btn-return:hover {
      background-color: #e0a800;
      transform: translateY(-1px);
    }

    .btn-back {
      background-color: #6c757d;
      color: white;
    }

    .btn-back:hover {
      background-color: #5a6268;
      transform: translateY(-1px);
    }

    .address-section {
      background-color: #f8f9fa;
      padding: 1rem;
      border-radius: 6px;
      margin-bottom: 1rem;
      border-left: 4px solid #007bff;
    }

    .address-title {
      font-weight: 600;
      color: #495057;
      margin-bottom: 0.5rem;
    }

    .address-text {
      color: #6c757d;
      line-height: 1.5;
    }

    .item-actions {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      margin-left: 1rem;
    }

    .btn-cancel-item {
      background-color: #dc3545;
      color: white;
      padding: 0.5rem 1rem;
      font-size: 0.8rem;
    }

    .btn-cancel-item:hover {
      background-color: #c82333;
      transform: translateY(-1px);
    }

    .btn-return-item {
      background-color: #ffc107;
      color: #212529;
      padding: 0.5rem 1rem;
      font-size: 0.8rem;
    }

    .btn-return-item:hover {
      background-color: #e0a800;
      transform: translateY(-1px);
    }

    .item-status {
      font-weight: 600;
      padding: 0.2rem 0.5rem;
      border-radius: 4px;
      font-size: 0.8rem;
      display: inline-block;
      margin-top: 0.3rem;
    }

    .status-ordered {
      background-color: #e3f2fd;
      color: #1976d2;
    }

    .status-cancelled {
      background-color: #ffebee;
      color: #d32f2f;
    }

    .status-delivered {
      background-color: #e8f5e8;
      color: #388e3c;
    }

    .status-return {
      background-color: #fff3e0;
      color: #f57c00;
    }

    .status-returned {
      background-color: #fce4ec;
      color: #c2185b;
    }

    .cancelled-badge {
      background-color: #ffebee;
      color: #d32f2f;
      padding: 0.5rem 1rem;
      border-radius: 4px;
      font-size: 0.8rem;
      font-weight: 600;
      display: inline-block;
      margin-top: 0.3rem;
    }

    .order-cancelled-label {
      background-color: #ffebee;
      color: #d32f2f;
      padding: 1rem;
      border-radius: 6px;
      font-size: 1.1rem;
      font-weight: 600;
      text-align: center;
      margin-bottom: 1rem;
      border: 2px solid #ffcdd2;
    }

    /* Disabled button styles */
    .action-btn:disabled {
      background-color: #6c757d !important;
      color: #fff !important;
      cursor: not-allowed !important;
      opacity: 0.6;
      transform: none !important;
    }

    .action-btn:disabled:hover {
      background-color: #6c757d !important;
      transform: none !important;
    }

    .btn-processing {
      background-color: #6c757d !important;
      color: #fff !important;
      cursor: not-allowed !important;
      opacity: 0.6;
    }

    .btn-processing:hover {
      background-color: #6c757d !important;
      transform: none !important;
    }

    @media (max-width: 768px) {
      .product-item {
        flex-direction: column;
        align-items: flex-start;
      }

      .item-actions {
        margin-left: 0;
        margin-top: 1rem;
        flex-direction: row;
        width: 100%;
      }

      .item-actions .action-btn {
        flex: 1;
      }
    }
  </style>
</head>
<body>
  <nav class="top-navbar">
    <a href="/" class="navbar-brand">StarForge.</a>
    <div class="navbar-user">Hello, <%= user.fullName %></div>
  </nav>

  <main class="main-content">
    <h1>Order Details</h1>

    <% 
      // Check if entire order is cancelled
      const allItemsCancelled = order.items.every(item => (item.status || 'Ordered') === 'Cancelled');
      const hasAnyCancelledItems = order.items.some(item => (item.status || 'Ordered') === 'Cancelled');
    %>

    <% if (order.status === 'Cancelled' || allItemsCancelled) { %>
      <div class="order-cancelled-label">
        🚫 Order Cancelled
      </div>
    <% } %>

    <div class="order-summary">
      <p><span class="label">Order ID:</span> <span class="value"><%= order._id %></span></p>
      <p><span class="label">Status:</span> <span class="value"><%= order.status %></span></p>
      <p><span class="label">Placed On:</span> <span class="value"><%= order.createdAt.toLocaleDateString('en-GB') %></span></p>
      <p><span class="label">Payment Method:</span> <span class="value">
        <% if (order.paymentMethod === 'Online') { %>
          Razorpay
        <% } else if (order.paymentMethod === 'COD') { %>
          Cash on Delivery
        <% } else if (order.paymentMethod === 'Wallet') { %>
          Wallet
        <% } else { %>
          <%= order.paymentMethod %>
        <% } %>
      </span></p>
      <p><span class="label">Total:</span> <span class="value">₹<%= order.totalAmount.toFixed(2) %></span></p>
    </div>

    <!-- Coupon Information Section -->
    <div class="coupon-summary">
      <% if (order.coupon && order.coupon.code && order.coupon.discountAmount > 0) { %>
        <p><span class="label">Coupon Code:</span> <span class="value coupon-code"><%= order.coupon.code %></span></p>
        <p><span class="label">Discount Amount:</span> <span class="value discount-amount">-₹<%= order.coupon.discountAmount.toFixed(2) %></span></p>
        <% 
          // Calculate subtotal before discount
          const subtotalBeforeDiscount = order.totalAmount + order.coupon.discountAmount;
        %>
        <p><span class="label">Subtotal:</span> <span class="value">₹<%= subtotalBeforeDiscount.toFixed(2) %></span></p>
        <p><span class="label">Final Total:</span> <span class="value final-total">₹<%= order.totalAmount.toFixed(2) %></span></p>
      <% } else { %>
        <p><span class="label">Coupon:</span> <span class="value no-coupon">No coupon used</span></p>
      <% } %>
    </div>

    <div class="address-section">
      <div class="address-title">Delivery Address</div>
      <div class="address-text">
        <% if (order.deliveryAddress) { %>
          <strong><%= order.deliveryAddress.name %></strong><br>
          <%= order.deliveryAddress.addressLine %><br>
          <%= order.deliveryAddress.city %>, <%= order.deliveryAddress.state %> - <%= order.deliveryAddress.pincode %><br>
          <% if (order.deliveryAddress.phone) { %>
            <%= order.deliveryAddress.phone %>
          <% } %>
        <% } else if (order.address) { %>
          <%= order.address %>
        <% } else { %>
          <em>No delivery address available</em>
        <% } %>
      </div>
    </div>

    <div class="products-section">
      <h3>Products</h3>
      <% order.items.forEach(item => { %>
        <div class="product-item">
          <img class="product-image" src="<%= item.productId?.mainImage || '/images/no-image.png' %>" alt="<%= item.productId?.name || 'Product' %>">
          <div class="product-info">
            <div class="product-name"><%= item.productId?.name || 'Unknown Product' %></div>
            <div class="product-details">
              Quantity: <%= item.quantity %> × ₹<%= item.adjustedUnitPrice.toFixed(2) %> = ₹<%= (item.adjustedUnitPrice * item.quantity).toFixed(2) %>
              <br>
              <span class="item-status status-<%= (item.status || 'ordered').toLowerCase() %>">
                Status: <%= item.status || 'Ordered' %>
              </span>
            </div>
          </div>
          <div class="item-actions" data-product-id="<%= item.productId._id %>">
            <% 
              const itemStatus = item.status || 'Ordered';
              const orderStatus = order.status;
              const canCancelItem = itemStatus === 'Ordered' && 
                                   (orderStatus === 'Pending' || orderStatus === 'Placed' || orderStatus === 'Processing') &&
                                   orderStatus !== 'Cancelled';
            %>
            
            <% if (itemStatus === 'Cancelled') { %>
              <div class="cancelled-badge">
                ❌ Cancelled
              </div>
            <% } else if (itemStatus === 'Return Requested') { %>
              <div class="cancelled-badge" style="background-color: #fff3e0; color: #f57c00;">
                🔄 Return Requested
              </div>
            <% } else if (itemStatus === 'Returned') { %>
              <div class="cancelled-badge" style="background-color: #fce4ec; color: #c2185b;">
                ↩️ Returned
              </div>
            <% } else if (itemStatus === 'Return Declined') { %>
              <div class="cancelled-badge">
                ❌ Return Declined
              </div>
            <% } else if (canCancelItem) { %>
              <button class="action-btn btn-cancel-item" onclick="cancelSingleItem('<%= order._id %>', '<%= item.productId._id %>')">
                Cancel Item
              </button>
            <% } %>
            <% if ((item.status || 'Ordered') === 'Delivered') { %>
              <button class="action-btn btn-return-item" onclick="requestReturnItem('<%= order._id %>', '<%= item.productId._id %>')">
                Return Item
              </button>
            <% } %>
          </div>
        </div>
      <% }) %>
    </div>

    <div class="order-actions">
      <% 
        // Enhanced logic to properly check if order can be cancelled
        const canCancelOrder = (order.status === 'Pending' || order.status === 'Placed' || order.status === 'Processing') && 
                               order.status !== 'Cancelled' && 
                               !allItemsCancelled;
        const canReturnOrder = order.status === 'Delivered' && 
                               order.status !== 'Cancelled' && 
                               !allItemsCancelled;
      %>
      
      <% if (canCancelOrder) { %>
        <button class="action-btn btn-cancel" id="cancelOrderBtn" onclick="cancelOrder('<%= order._id %>')">
          Cancel Order
        </button>
      <% } %>
      
      <% if (canReturnOrder) { %>
        <button class="action-btn btn-return" onclick="requestReturn('<%= order._id %>')">
          Request Return
        </button>
      <% } %>
      
      <a href="/orders" class="action-btn btn-back">
        Back to Orders
      </a>
    </div>
  </main>

  <script>
    // Global variable to track if any cancellation is in progress
    let cancellationInProgress = false;

    function disableAllCancelButtons() {
      const cancelButtons = document.querySelectorAll('.btn-cancel, .btn-cancel-item');
      cancelButtons.forEach(button => {
        button.disabled = true;
        button.classList.add('btn-processing');
        const originalText = button.textContent;
        button.setAttribute('data-original-text', originalText);
        if (button.classList.contains('btn-cancel')) {
          button.innerHTML = '<span>Cancelling Order...</span>';
        } else {
          button.innerHTML = '<span>Cancelling...</span>';
        }
      });
      cancellationInProgress = true;
    }

    function enableAllCancelButtons() {
      const cancelButtons = document.querySelectorAll('.btn-cancel, .btn-cancel-item');
      cancelButtons.forEach(button => {
        button.disabled = false;
        button.classList.remove('btn-processing');
        const originalText = button.getAttribute('data-original-text');
        if (originalText) {
          button.textContent = originalText;
        }
      });
      cancellationInProgress = false;
    }

    async function cancelOrder(orderId) {
      if (cancellationInProgress) {
        return;
      }

      const result = await Swal.fire({
        title: 'Cancel Order?',
        text: 'Are you sure you want to cancel this order? This action cannot be undone.',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#dc3545',
        cancelButtonColor: '#6c757d',
        confirmButtonText: 'Yes, Cancel Order',
        cancelButtonText: 'Keep Order'
      });

      if (result.isConfirmed) {
        disableAllCancelButtons();
        
        try {
          const response = await fetch(`/order/cancel/${orderId}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            }
          });

          const data = await response.json();

          if (data.success) {
            // IMMEDIATELY UPDATE THE UI - Hide cancel order button and show cancelled banner
            const cancelOrderBtn = document.querySelector('#cancelOrderBtn');
            if (cancelOrderBtn) {
              cancelOrderBtn.style.display = 'none';
            }
            
            // Add order cancelled banner if not already present
            const mainContent = document.querySelector('.main-content');
            const existingBanner = document.querySelector('.order-cancelled-label');
            if (!existingBanner && mainContent) {
              const banner = document.createElement('div');
              banner.className = 'order-cancelled-label';
              banner.innerHTML = '🚫 Order Cancelled';
              const h1 = mainContent.querySelector('h1');
              if (h1) {
                h1.insertAdjacentElement('afterend', banner);
              }
            }
            
            // Update order status in summary
            const statusValue = document.querySelector('.order-summary p:nth-child(2) .value');
            if (statusValue) {
              statusValue.textContent = 'Cancelled';
            }
            
            // Update all item statuses and hide their cancel buttons
            const itemActionsElements = document.querySelectorAll('.item-actions');
            itemActionsElements.forEach(itemActions => {
              const cancelItemBtn = itemActions.querySelector('.btn-cancel-item');
              if (cancelItemBtn) {
                itemActions.innerHTML = `
                  <div class="cancelled-badge">
                    ❌ Cancelled
                  </div>
                `;
              }
            });
            
            // Update all item statuses in product details
            const statusSpans = document.querySelectorAll('.item-status');
            statusSpans.forEach(statusSpan => {
              statusSpan.textContent = 'Status: Cancelled';
              statusSpan.className = 'item-status status-cancelled';
            });
            
            await Swal.fire({
              title: 'Order Cancelled!',
              text: data.message,
              icon: 'success',
              confirmButtonColor: '#28a745'
            });
            
            // Don't force refresh - the UI has been updated correctly
            console.log('Order cancellation UI update completed successfully');
          } else {
            enableAllCancelButtons();
            throw new Error(data.message || 'Failed to cancel order');
          }
        } catch (error) {
          enableAllCancelButtons();
          await Swal.fire({
            title: 'Error!',
            text: error.message || 'Something went wrong while cancelling the order.',
            icon: 'error',
            confirmButtonColor: '#dc3545'
          });
        }
      }
    }

    async function requestReturn(orderId) {
      const { value: reason } = await Swal.fire({
        title: 'Request Return',
        text: 'Please provide a reason for returning this order:',
        input: 'textarea',
        inputPlaceholder: 'Enter your reason for return...',
        inputAttributes: {
          'aria-label': 'Return reason'
        },
        showCancelButton: true,
        confirmButtonColor: '#ffc107',
        cancelButtonColor: '#6c757d',
        confirmButtonText: 'Submit Return Request',
        cancelButtonText: 'Cancel',
        inputValidator: (value) => {
          if (!value || value.trim().length < 10) {
            return 'Please provide a detailed reason (at least 10 characters)';
          }
        }
      });

      if (reason) {
        try {
          const response = await fetch(`/order/return/${orderId}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ reason: reason.trim() })
          });

          const data = await response.json();

          if (data.success) {
            await Swal.fire({
              title: 'Return Request Submitted!',
              text: data.message,
              icon: 'success',
              confirmButtonColor: '#28a745'
            });
            window.location.reload();
          } else {
            throw new Error(data.message || 'Failed to submit return request');
          }
        } catch (error) {
          await Swal.fire({
            title: 'Error!',
            text: error.message || 'Something went wrong while submitting the return request.',
            icon: 'error',
            confirmButtonColor: '#dc3545'
          });
        }
      }
    }

    async function cancelSingleItem(orderId, productId) {
      if (cancellationInProgress) {
        return;
      }

      const result = await Swal.fire({
        title: 'Cancel Item?',
        text: 'Are you sure you want to cancel this item? This action cannot be undone.',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#dc3545',
        cancelButtonColor: '#6c757d',
        confirmButtonText: 'Yes, Cancel Item',
        cancelButtonText: 'Keep Item'
      });

      if (result.isConfirmed) {
        disableAllCancelButtons();
        
        try {
          const response = await fetch(`/cancelItem/${orderId}/${productId}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            }
          });

          const data = await response.json();

          if (data.success) {
            // IMMEDIATELY UPDATE THE UI - Remove the cancel button and show cancelled badge
            const itemActionsDiv = document.querySelector(`[data-product-id="${productId}"]`);
            if (itemActionsDiv) {
              itemActionsDiv.innerHTML = `
                <div class="cancelled-badge">
                  ❌ Cancelled
                </div>
              `;
              
              // Update the item status in the product details
              const productItem = itemActionsDiv.closest('.product-item');
              if (productItem) {
                const statusSpan = productItem.querySelector('.item-status');
                if (statusSpan) {
                  statusSpan.textContent = 'Status: Cancelled';
                  statusSpan.className = 'item-status status-cancelled';
                }
              }
            }
            
            // Update the total amount displayed on the page
            if (data.newOrderTotal !== undefined) {
              const orderSummary = document.querySelector('.order-summary');
              if (orderSummary) {
                const totalParagraph = orderSummary.querySelector('p:last-child .value');
                if (totalParagraph) {
                  totalParagraph.textContent = `₹${data.newOrderTotal.toFixed(2)}`;
                }
              }
            }
            
            // Check if all items are now cancelled and update order status
            if (data.orderFullyCancelled) {
              // Add order cancelled banner if not already present
              const mainContent = document.querySelector('.main-content');
              const existingBanner = document.querySelector('.order-cancelled-label');
              if (!existingBanner && mainContent) {
                const banner = document.createElement('div');
                banner.className = 'order-cancelled-label';
                banner.innerHTML = '🚫 Order Cancelled';
                const h1 = mainContent.querySelector('h1');
                if (h1) {
                  h1.insertAdjacentElement('afterend', banner);
                }
              }
              
              // Hide the main cancel order button if it exists
              const cancelOrderBtn = document.querySelector('#cancelOrderBtn');
              if (cancelOrderBtn) {
                cancelOrderBtn.style.display = 'none';
              }
              
              // Update order status in summary
              const statusValue = document.querySelector('.order-summary p:nth-child(2) .value');
              if (statusValue) {
                statusValue.textContent = 'Cancelled';
              }
            }
            
            let message = data.message;
            let htmlContent = `<div style="text-align: left;">`;
            
            if (data.refundAmount && data.refundAmount > 0) {
              htmlContent += `<p><strong>✓ Item cancelled successfully</strong></p>`;
              htmlContent += `<p><strong>Refund Amount:</strong> ₹${data.refundAmount.toFixed(2)}</p>`;
              htmlContent += `<p><em>The refund has been credited to your wallet.</em></p>`;
            } else {
              htmlContent += `<p><strong>✓ Item cancelled successfully</strong></p>`;
            }
            
            if (data.couponRemoved) {
              htmlContent += `<p><strong>Coupon Adjustment:</strong></p>`;
              htmlContent += `<p><em>The coupon was removed as the remaining order total no longer meets the minimum requirement.</em></p>`;
            }
            
            if (data.newOrderTotal !== undefined) {
              htmlContent += `<p><strong>Updated Order Total:</strong> ₹${data.newOrderTotal.toFixed(2)}</p>`;
            }
            
            htmlContent += `</div>`;
            
            await Swal.fire({
              title: 'Item Cancelled!',
              html: htmlContent,
              icon: 'success',
              confirmButtonColor: '#28a745',
              width: '500px'
            });
            
            // Re-enable remaining cancel buttons
            cancellationInProgress = false;
            const remainingCancelButtons = document.querySelectorAll('.btn-cancel, .btn-cancel-item');
            remainingCancelButtons.forEach(button => {
              button.disabled = false;
              button.classList.remove('btn-processing');
              const originalText = button.getAttribute('data-original-text');
              if (originalText) {
                button.textContent = originalText;
              }
            });
            
          } else {
            enableAllCancelButtons();
            throw new Error(data.error || 'Failed to cancel item');
          }
        } catch (error) {
          enableAllCancelButtons();
          await Swal.fire({
            title: 'Error!',
            text: error.message || 'Something went wrong while cancelling the item.',
            icon: 'error',
            confirmButtonColor: '#dc3545'
          });
        }
      }
    }

    async function requestReturnItem(orderId, productId) {
      const { value: reason } = await Swal.fire({
        title: 'Request Item Return',
        text: 'Please provide a reason for returning this item:',
        input: 'textarea',
        inputPlaceholder: 'Enter your reason for return...',
        inputAttributes: {
          'aria-label': 'Return reason'
        },
        showCancelButton: true,
        confirmButtonColor: '#ffc107',
        cancelButtonColor: '#6c757d',
        confirmButtonText: 'Submit Return Request',
        cancelButtonText: 'Cancel',
        inputValidator: (value) => {
          if (!value || value.trim().length < 10) {
            return 'Please provide a detailed reason (at least 10 characters)';
          }
        }
      });

      if (reason) {
        try {
          const response = await fetch(`/returnItem/${orderId}/${productId}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ reason: reason.trim() })
          });

          const data = await response.json();

          if (data.success) {
            await Swal.fire({
              title: 'Return Request Submitted!',
              text: data.message,
              icon: 'success',
              confirmButtonColor: '#28a745'
            });
            window.location.reload();
          } else {
            throw new Error(data.message || 'Failed to submit return request');
          }
        } catch (error) {
          await Swal.fire({
            title: 'Error!',
            text: error.message || 'Something went wrong while submitting the return request.',
            icon: 'error',
            confirmButtonColor: '#dc3545'
          });
        }
      }
    }
  </script>
</body>
</html>