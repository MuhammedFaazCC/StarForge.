<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>My Addresses - StarForge</title>
  <link rel="stylesheet" href="/css/user/profileDashboard.css" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.32/dist/sweetalert2.min.css" rel="stylesheet">
  <style>
    .address-stats {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1.5rem;
      margin-bottom: 2rem;
    }

    .stat-item {
      background: white;
      border-radius: 12px;
      padding: 1.5rem;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
      border: 1px solid #e5e7eb;
      display: flex;
      align-items: center;
      gap: 1rem;
      transition: all 0.3s ease;
    }

    .stat-item:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 24px rgba(0, 0, 0, 0.12);
    }

    .stat-item i {
      font-size: 2rem;
      color: #fca120;
      background: #fef7ed;
      padding: 0.75rem;
      border-radius: 50%;
      width: 60px;
      height: 60px;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .stat-number {
      font-size: 1.75rem;
      font-weight: 700;
      color: #222;
      display: block;
    }

    .stat-label {
      font-size: 0.9rem;
      color: #6b7280;
      font-weight: 500;
    }

    .addresses-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
      gap: 1.5rem;
      margin-bottom: 2rem;
    }

    .address-card {
      background: white;
      border-radius: 16px;
      padding: 2rem;
      border: 2px solid #f3f4f6;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }

    .address-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 4px;
      background: linear-gradient(90deg, #fca120, #e8940f);
      transform: scaleX(0);
      transition: transform 0.3s ease;
    }

    .address-card:hover::before {
      transform: scaleX(1);
    }

    .address-card:hover {
      transform: translateY(-4px);
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);
      border-color: #fca120;
    }

    .default-address {
      border-color: #fca120;
      background: linear-gradient(135deg, #fef7ed 0%, #ffffff 100%);
    }

    .default-address::before {
      transform: scaleX(1);
    }

    .address-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 1.5rem;
      padding-bottom: 1rem;
      border-bottom: 1px solid #f3f4f6;
    }

    .address-name {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      font-weight: 600;
      color: #222;
      font-size: 1.1rem;
      flex: 1;
    }

    .address-name i {
      color: #fca120;
      font-size: 1.2rem;
    }

    .default-badge {
      background: linear-gradient(135deg, #fca120 0%, #e8940f 100%);
      color: white;
      padding: 0.375rem 0.875rem;
      border-radius: 20px;
      font-size: 0.75rem;
      font-weight: 600;
      margin-left: 0.75rem;
      display: inline-flex;
      align-items: center;
      gap: 0.375rem;
      box-shadow: 0 2px 8px rgba(252, 161, 32, 0.3);
    }

    .address-actions {
      display: flex;
      gap: 0.5rem;
    }

    .action-btn {
      background: none;
      border: none;
      padding: 0.625rem;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.3s ease;
      font-size: 1rem;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 40px;
      height: 40px;
    }

    .edit-btn {
      color: #3b82f6;
      background: #eff6ff;
    }

    .edit-btn:hover {
      background: #dbeafe;
      transform: scale(1.1);
    }

    .default-btn {
      color: #fca120;
      background: #fef7ed;
    }

    .default-btn:hover {
      background: #fed7aa;
      transform: scale(1.1);
    }

    .delete-btn {
      color: #ef4444;
      background: #fef2f2;
    }

    .delete-btn:hover {
      background: #fee2e2;
      transform: scale(1.1);
    }

    .address-details {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      margin-bottom: 1.5rem;
    }

    .address-field {
      display: flex;
      align-items: flex-start;
      gap: 0.875rem;
      line-height: 1.6;
    }

    .address-field i {
      color: #6b7280;
      margin-top: 0.125rem;
      width: 18px;
      flex-shrink: 0;
      font-size: 1rem;
    }

    .address-field span {
      color: #374151;
      font-size: 0.95rem;
      font-weight: 500;
    }

    .address-text {
      line-height: 1.6;
    }

    .address-footer {
      display: flex;
      gap: 0.75rem;
      padding-top: 1rem;
      border-top: 1px solid #f3f4f6;
    }

    .quick-action-btn {
      background: #fef7ed;
      color: #fca120;
      border: 1px solid #fed7aa;
      padding: 0.625rem 1rem;
      border-radius: 8px;
      font-size: 0.85rem;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      flex: 1;
      justify-content: center;
    }

    .quick-action-btn:hover {
      background: #fed7aa;
      transform: translateY(-1px);
      box-shadow: 0 2px 8px rgba(252, 161, 32, 0.2);
    }

    .add-address-btn {
      background: linear-gradient(135deg, #fca120 0%, #e8940f 100%);
      color: white;
      border: none;
      padding: 0.875rem 1.75rem;
      border-radius: 10px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      font-size: 0.95rem;
      box-shadow: 0 4px 16px rgba(252, 161, 32, 0.3);
    }

    .add-address-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 24px rgba(252, 161, 32, 0.4);
      color: white;
      text-decoration: none;
    }

    .empty-action-btn {
      background: linear-gradient(135deg, #fca120 0%, #e8940f 100%);
      color: white;
      border: none;
      padding: 1rem 2rem;
      border-radius: 10px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      font-size: 1rem;
      box-shadow: 0 4px 16px rgba(252, 161, 32, 0.3);
    }

    .empty-action-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 24px rgba(252, 161, 32, 0.4);
      color: white;
      text-decoration: none;
    }

    @media (max-width: 768px) {
      .addresses-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
      }

      .address-card {
        padding: 1.5rem;
      }

      .address-header {
        flex-direction: column;
        gap: 1rem;
        align-items: flex-start;
      }

      .address-actions {
        align-self: flex-end;
      }

      .address-name {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.5rem;
      }

      .default-badge {
        margin-left: 0;
      }

      .address-footer {
        flex-direction: column;
      }

      .stat-item {
        flex-direction: column;
        text-align: center;
        gap: 0.75rem;
      }

      .stat-item i {
        margin: 0 auto;
      }
    }

    @media (max-width: 576px) {
      .page-header {
        text-align: center;
      }

      .add-address-btn {
        width: 100%;
        justify-content: center;
      }

      .address-stats {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>
<body>
  <%- include('../partials/user/profileNavbar', { user, cartCount: cartCount || 0 }) %>

  <%- include('../partials/user/profileSidebar', { user, currentPage: 'address' }) %>
  

  <div class="main-content">
    <div class="content-wrapper">
      <div class="profile-container">
        <div class="page-header">
          <div>
            <h1 class="page-title">My Addresses</h1>
            <div class="breadcrumb">
              <a href="/LoadProfile">My Profile</a> / My Addresses
            </div>
          </div>
          <a href="/address/add" class="btn-primary add-address-btn">
            <i class="fas fa-plus"></i>
            Add New Address
          </a>
        </div>

        <% if (typeof error !== 'undefined' && error) { %>
          <div class="alert alert-error" id="errorAlert">
            <i class="fas fa-exclamation-circle"></i>
            <span><%= error %></span>
            <button type="button" class="alert-close" onclick="closeAlert('errorAlert')">
              <i class="fas fa-times"></i>
            </button>
          </div>
        <% } %>

        <% if (typeof success !== 'undefined' && success) { %>
          <div class="alert alert-success" id="successAlert">
            <i class="fas fa-check-circle"></i>
            <span><%= success %></span>
            <button type="button" class="alert-close" onclick="closeAlert('successAlert')">
              <i class="fas fa-times"></i>
            </button>
          </div>
        <% } %>

        <% if (addresses.length > 0) { %>
          <div class="address-stats">
            <div class="stat-item">
              <i class="fas fa-map-marker-alt"></i>
              <span class="stat-number"><%= addresses.length %></span>
              <span class="stat-label">Total Addresses</span>
            </div>
            <div class="stat-item">
              <i class="fas fa-star"></i>
              <span class="stat-number"><%= addresses.filter(addr => addr.isDefault).length %></span>
              <span class="stat-label">Default Address</span>
            </div>
          </div>
        <% } %>

        <% if (addresses.length === 0) { %>
          <div class="empty-state">
            <div class="empty-icon">
              <i class="fas fa-map-marker-alt"></i>
            </div>
            <div class="empty-title">No addresses found</div>
            <div class="empty-description">
              You haven't added any delivery addresses yet. Add your first address to get started with seamless deliveries.
            </div>
            <a href="/address/add" class="btn-primary empty-action-btn">
              <i class="fas fa-plus"></i>
              Add Your First Address
            </a>
          </div>
        <% } else { %>
          <div class="addresses-container">
            <div class="addresses-grid">
              <% addresses.forEach((address, index) => { %>
                <div class="address-card <%= address.isDefault ? 'default-address' : '' %>" data-address-id="<%= address._id %>">
                  <div class="address-header">
                    <div class="address-name">
                      <i class="fas fa-user"></i>
                      <span class="name-text"><%= address.name %></span>
                      <% if (address.isDefault) { %>
                        <span class="default-badge">
                          <i class="fas fa-star"></i>
                          Default
                        </span>
                      <% } %>
                    </div>
                    <div class="address-actions">
                      <button class="action-btn edit-btn" onclick="openEditModal(event, '<%= address._id %>')" title="Edit Address" aria-label="Edit Address">
                        <i class="fas fa-edit"></i>
                      </button>
                      <% if (!address.isDefault) { %>
                        <button class="action-btn default-btn" onclick="setDefaultAddress(event, '<%= address._id %>')" title="Set as Default" aria-label="Set as Default">
                          <i class="fas fa-star"></i>
                        </button>
                      <% } %>
                      <button class="action-btn delete-btn" onclick="deleteAddress(event, '<%= address._id %>')" title="Delete Address" aria-label="Delete Address">
                        <i class="fas fa-trash"></i>
                      </button>
                    </div>
                  </div>
                  
                  <div class="address-details">
                    <% if (address.mobile) { %>
                      <div class="address-field">
                        <i class="fas fa-phone"></i>
                        <span><%= address.mobile %></span>
                      </div>
                    <% } %>
                    
                    <div class="address-field">
                      <i class="fas fa-map-marker-alt"></i>
                      <span class="address-text">
                        <%= address.address %><br>
                        <%= address.city %>, <%= address.district %><br>
                        <%= address.state %> - <%= address.pinCode %>
                      </span>
                    </div>
                  </div>

                  <div class="address-footer">
                    <button class="quick-action-btn" onclick="copyAddress('<%= address._id %>')" title="Copy Address">
                      <i class="fas fa-copy"></i>
                      Copy
                    </button>
                    <% if (!address.isDefault) { %>
                      <button class="quick-action-btn" onclick="setDefaultAddress(event, '<%= address._id %>')" title="Set as Default">
                        <i class="fas fa-star"></i>
                        Set Default
                      </button>
                    <% } %>
                  </div>
                </div>
              <% }) %>
            </div>
          </div>
        <% } %>
      </div>
    </div>
  </div>

  <div class="modal fade" id="editAddressModal" tabindex="-1" aria-labelledby="editAddressModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="editAddressModalLabel">
            <i class="fas fa-edit"></i>
            Edit Address
          </h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="editAddressForm" novalidate>
            <input type="hidden" id="editAddressId" name="addressId">
            
            <div class="row">
              <div class="col-md-6 mb-3">
                <label for="editName" class="form-label">
                  <i class="fas fa-user"></i>
                  Full Name *
                </label>
                <input type="text" class="form-control" id="editName" name="name" required>
                <div class="invalid-feedback"></div>
              </div>
              <div class="col-md-6 mb-3">
                <label for="editMobile" class="form-label">
                  <i class="fas fa-phone"></i>
                  Mobile Number
                </label>
                <input type="tel" class="form-control" id="editMobile" name="mobile" pattern="[0-9]{10}" maxlength="10">
                <div class="invalid-feedback"></div>
              </div>
            </div>
            
            <div class="mb-3">
              <label for="editAddress" class="form-label">
                <i class="fas fa-home"></i>
                Address (House No, Building, Street, Area) *
              </label>
              <textarea class="form-control" id="editAddress" name="address" rows="3" required></textarea>
              <div class="invalid-feedback"></div>
            </div>
            
            <div class="row">
              <div class="col-md-4 mb-3">
                <label for="editPincode" class="form-label">
                  <i class="fas fa-map-pin"></i>
                  Pincode *
                </label>
                <input type="text" class="form-control" id="editPincode" name="pincode" pattern="[0-9]{6}" maxlength="6" required>
                <div class="invalid-feedback"></div>
              </div>
              <div class="col-md-4 mb-3">
                <label for="editCity" class="form-label">
                  <i class="fas fa-city"></i>
                  City *
                </label>
                <input type="text" class="form-control" id="editCity" name="city" required>
                <div class="invalid-feedback"></div>
              </div>
              <div class="col-md-4 mb-3">
                <label for="editDistrict" class="form-label">
                  <i class="fas fa-map"></i>
                  District *
                </label>
                <input type="text" class="form-control" id="editDistrict" name="district" required>
                <div class="invalid-feedback"></div>
              </div>
            </div>
            
            <div class="mb-3">
              <label for="editState" class="form-label">
                <i class="fas fa-flag"></i>
                State *
              </label>
              <input type="text" class="form-control" id="editState" name="state" required>
              <div class="invalid-feedback"></div>
            </div>
            
            <div class="mb-3 form-check">
              <input type="checkbox" class="form-check-input" id="editIsDefault" name="isDefault">
              <label class="form-check-label" for="editIsDefault">
                <i class="fas fa-star"></i>
                Make this my default address
              </label>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
            <i class="fas fa-times"></i>
            Cancel
          </button>
          <button type="button" class="btn btn-primary" id="updateAddressBtn">
            <i class="fas fa-save"></i>
            Update Address
          </button>
        </div>
      </div>
    </div>
  </div>

  <style>
    .alert {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      padding: 1rem;
      border-radius: 8px;
      margin-bottom: 1.5rem;
      border: none;
      font-weight: 500;
    }

    .alert-error {
      background: linear-gradient(135deg, #ffebee 0%, #ffcdd2 100%);
      color: #c62828;
      border-left: 4px solid #c62828;
    }

    .alert-success {
      background: linear-gradient(135deg, #e8f5e8 0%, #c8e6c9 100%);
      color: #2e7d32;
      border-left: 4px solid #2e7d32;
    }

    .empty-state {
      text-align: center;
      padding: 4rem 2rem;
      background: linear-gradient(135deg, rgba(248,250,252,0.8) 0%, rgba(241,245,249,0.8) 100%);
      backdrop-filter: blur(10px);
      border-radius: 16px;
      border: 2px dashed rgba(203, 213, 225, 0.6);
      margin: 1rem 0;
    }

    .empty-icon {
      font-size: 4rem;
      color: #cbd5e1;
      margin-bottom: 1.5rem;
    }

    .empty-title {
      font-size: 1.5rem;
      font-weight: 600;
      margin-bottom: 0.75rem;
      color: #475569;
    }

    .empty-description {
      margin-bottom: 2rem;
      font-size: 1rem;
      line-height: 1.6;
      color: #64748b;
    }

    .addresses-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
      gap: 1.5rem;
      margin-bottom: 2rem;
    }

    .address-card {
      background: linear-gradient(135deg, rgba(255,255,255,0.95) 0%, rgba(248,250,252,0.95) 100%);
      backdrop-filter: blur(20px);
      border-radius: 16px;
      padding: 1.5rem;
      border: 1px solid rgba(255,255,255,0.3);
      box-shadow: 
        0 10px 25px rgba(0,0,0,0.08),
        0 4px 10px rgba(0,0,0,0.06);
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }

    .address-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 3px;
      background: linear-gradient(90deg, #fca120, #ff8c42);
      transform: scaleX(0);
      transition: transform 0.3s ease;
    }

    .address-card:hover::before {
      transform: scaleX(1);
    }

    .address-card:hover {
      transform: translateY(-5px);
      box-shadow: 
        0 20px 40px rgba(0,0,0,0.12),
        0 8px 16px rgba(0,0,0,0.08);
    }

    .default-address {
      border: 2px solid #fca120;
      background: linear-gradient(135deg, rgba(252, 161, 32, 0.05) 0%, rgba(255, 255, 255, 0.95) 100%);
    }

    .default-address::before {
      transform: scaleX(1);
      background: linear-gradient(90deg, #fca120, #ff8c42);
    }

    .address-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 1rem;
      padding-bottom: 1rem;
      border-bottom: 1px solid rgba(226, 232, 240, 0.5);
    }

    .address-name {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      font-weight: 600;
      color: #1e293b;
      font-size: 1.1rem;
      flex: 1;
    }

    .address-name i {
      color: #fca120;
    }

    .default-badge {
      background: linear-gradient(135deg, #fca120 0%, #ff8c42 100%);
      color: white;
      padding: 0.25rem 0.75rem;
      border-radius: 12px;
      font-size: 0.75rem;
      font-weight: 600;
      margin-left: 0.5rem;
      display: inline-flex;
      align-items: center;
      gap: 0.25rem;
      box-shadow: 0 2px 8px rgba(252, 161, 32, 0.3);
    }

    .address-actions {
      display: flex;
      gap: 0.5rem;
    }

    .action-btn {
      background: none;
      border: none;
      padding: 0.5rem;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.3s ease;
      font-size: 0.9rem;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 36px;
      height: 36px;
    }

    .edit-btn {
      color: #3b82f6;
      background: rgba(59, 130, 246, 0.1);
    }

    .edit-btn:hover {
      background: rgba(59, 130, 246, 0.2);
      transform: scale(1.1);
    }

    .default-btn {
      color: #fca120;
      background: rgba(252, 161, 32, 0.1);
    }

    .default-btn:hover {
      background: rgba(252, 161, 32, 0.2);
      transform: scale(1.1);
    }

    .delete-btn {
      color: #ef4444;
      background: rgba(239, 68, 68, 0.1);
    }

    .delete-btn:hover {
      background: rgba(239, 68, 68, 0.2);
      transform: scale(1.1);
    }

    .address-details {
      display: flex;
      flex-direction: column;
      gap: 0.75rem;
    }

    .address-field {
      display: flex;
      align-items: flex-start;
      gap: 0.75rem;
      line-height: 1.6;
    }

    .address-field i {
      color: #64748b;
      margin-top: 0.125rem;
      width: 16px;
      flex-shrink: 0;
    }

    .address-field span {
      color: #374151;
      font-size: 0.95rem;
    }

    .modal-header {
      background: linear-gradient(135deg, #fca120 0%, #ff8c42 100%);
      color: white;
      border-bottom: none;
      border-radius: 16px 16px 0 0;
    }

    .modal-content {
      border-radius: 16px;
      border: none;
      box-shadow: 0 25px 50px rgba(0, 0, 0, 0.25);
    }

    .modal-title {
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .modal-header .btn-close {
      filter: invert(1);
      opacity: 0.8;
    }

    .modal-header .btn-close:hover {
      opacity: 1;
    }

    .form-label {
      font-weight: 600;
      color: #374151;
      margin-bottom: 0.5rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .form-label i {
      color: #fca120;
      width: 16px;
    }

    .form-control {
      border-radius: 8px;
      border: 2px solid #e5e7eb;
      padding: 0.75rem;
      transition: all 0.3s ease;
    }

    .form-control:focus {
      border-color: #fca120;
      box-shadow: 0 0 0 0.2rem rgba(252, 161, 32, 0.25);
    }

    .form-control.is-invalid {
      border-color: #ef4444;
    }

    .invalid-feedback {
      display: block;
      color: #ef4444;
      font-size: 0.875rem;
      margin-top: 0.25rem;
    }

    .form-check-input:checked {
      background-color: #fca120;
      border-color: #fca120;
    }

    .form-check-label {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      font-weight: 500;
    }

    .modal-footer .btn {
      padding: 0.75rem 1.5rem;
      border-radius: 8px;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      transition: all 0.3s ease;
    }

    .modal-footer .btn-primary {
      background: linear-gradient(135deg, #fca120 0%, #ff8c42 100%);
      border: none;
      box-shadow: 0 4px 15px rgba(252, 161, 32, 0.3);
    }

    .modal-footer .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(252, 161, 32, 0.4);
    }

    @media (max-width: 768px) {
      .addresses-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
      }

      .address-card {
        padding: 1rem;
      }

      .address-header {
        flex-direction: column;
        gap: 1rem;
        align-items: flex-start;
      }

      .address-actions {
        align-self: flex-end;
      }

      .address-name {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.5rem;
      }

      .default-badge {
        margin-left: 0;
      }

      .modal-dialog {
        margin: 1rem;
      }

      .modal-footer {
        flex-direction: column;
        gap: 0.5rem;
      }

      .modal-footer .btn {
        width: 100%;
        justify-content: center;
      }
    }

    .btn-loading {
      position: relative;
      pointer-events: none;
    }

    .btn-loading::after {
      content: '';
      position: absolute;
      width: 16px;
      height: 16px;
      margin: auto;
      border: 2px solid transparent;
      border-top-color: currentColor;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .btn-primary {
      background: linear-gradient(135deg, #fca120 0%, #ff8c42 100%);
      border: none;
      padding: 0.75rem 1.5rem;
      border-radius: 8px;
      font-weight: 600;
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      transition: all 0.3s ease;
      box-shadow: 0 4px 15px rgba(252, 161, 32, 0.3);
    }

    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(252, 161, 32, 0.4);
      background: linear-gradient(135deg, #ff8c42 0%, #fca120 100%);
    }

    .address-stats {
      display: flex;
      gap: 1rem;
      margin-bottom: 2rem;
      flex-wrap: wrap;
    }

    .stat-item {
      background: linear-gradient(135deg, rgba(255,255,255,0.9) 0%, rgba(248,250,252,0.9) 100%);
      backdrop-filter: blur(10px);
      border-radius: 12px;
      padding: 1.5rem;
      border: 1px solid rgba(255,255,255,0.3);
      box-shadow: 0 8px 20px rgba(0,0,0,0.08);
      display: flex;
      align-items: center;
      gap: 1rem;
      flex: 1;
      min-width: 200px;
      transition: all 0.3s ease;
    }

    .stat-item:hover {
      transform: translateY(-3px);
      box-shadow: 0 12px 30px rgba(0,0,0,0.12);
    }

    .stat-item i {
      font-size: 2rem;
      color: #fca120;
      background: rgba(252, 161, 32, 0.1);
      padding: 0.75rem;
      border-radius: 50%;
      width: 60px;
      height: 60px;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .stat-number {
      font-size: 1.5rem;
      font-weight: 700;
      color: #1e293b;
      display: block;
    }

    .stat-label {
      font-size: 0.9rem;
      color: #64748b;
      font-weight: 500;
    }

    .address-footer {
      display: flex;
      gap: 0.5rem;
      margin-top: 1rem;
      padding-top: 1rem;
      border-top: 1px solid rgba(226, 232, 240, 0.5);
    }

    .quick-action-btn {
      background: rgba(252, 161, 32, 0.1);
      color: #fca120;
      border: none;
      padding: 0.5rem 1rem;
      border-radius: 6px;
      font-size: 0.85rem;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .quick-action-btn:hover {
      background: rgba(252, 161, 32, 0.2);
      transform: scale(1.05);
    }

    .alert-close {
      background: none;
      border: none;
      color: currentColor;
      opacity: 0.7;
      cursor: pointer;
      padding: 0.25rem;
      margin-left: auto;
      border-radius: 4px;
      transition: all 0.2s ease;
    }

    .alert-close:hover {
      opacity: 1;
      background: rgba(0,0,0,0.1);
    }

    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .address-card {
      animation: fadeInUp 0.5s ease forwards;
    }

    .address-card:nth-child(2) {
      animation-delay: 0.1s;
    }

    .address-card:nth-child(3) {
      animation-delay: 0.2s;
    }

    .address-card:nth-child(4) {
      animation-delay: 0.3s;
    }

    @media (max-width: 576px) {
      .address-stats {
        flex-direction: column;
      }

      .stat-item {
        min-width: auto;
      }

      .address-footer {
        flex-direction: column;
      }

      .quick-action-btn {
        justify-content: center;
      }

      .page-header {
        text-align: center;
      }

      .add-address-btn {
        width: 100%;
        justify-content: center;
      }
    }
  </style>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    function validateForm(form) {
      let isValid = true;
      const requiredFields = form.querySelectorAll('[required]');
      
      requiredFields.forEach(field => {
        const value = field.value.trim();
        const feedback = field.nextElementSibling;
        
        field.classList.remove('is-invalid');
        if (feedback && feedback.classList.contains('invalid-feedback')) {
          feedback.textContent = '';
        }
        
        if (!value) {
          showFieldError(field, 'This field is required');
          isValid = false;
        } else if (field.name === 'mobile' && value && !/^[0-9]{10}$/.test(value)) {
          showFieldError(field, 'Please enter a valid 10-digit mobile number');
          isValid = false;
        } else if (field.name === 'pincode' && !/^[0-9]{6}$/.test(value)) {
          showFieldError(field, 'Please enter a valid 6-digit pincode');
          isValid = false;
        } else if (field.name === 'name' && value.length < 2) {
          showFieldError(field, 'Name must be at least 2 characters long');
          isValid = false;
        } else if (field.name === 'address' && value.length < 10) {
          showFieldError(field, 'Please enter a complete address');
          isValid = false;
        }
      });
      
      return isValid;
    }
    
    function showFieldError(field, message) {
      field.classList.add('is-invalid');
      const feedback = field.nextElementSibling;
      if (feedback && feedback.classList.contains('invalid-feedback')) {
        feedback.textContent = message;
      }
    }

    function setButtonLoading(button, loading = true) {
      if (loading) {
        button.classList.add('btn-loading');
        button.disabled = true;
        button.innerHTML = '<span>Loading...</span>';
      } else {
        button.classList.remove('btn-loading');
        button.disabled = false;
      }
    }

    async function openEditModal(event, addressId) {
      event.preventDefault();
      
      try {
        const response = await fetch(`/account/addresses/edit/${addressId}`);
        
        if (!response.ok) {
          throw new Error(`HTTP error: ${response.status}`);
        }
        
        const data = await response.json();
        
        document.getElementById("editAddressId").value = addressId;
        document.getElementById("editName").value = data.name || "";
        document.getElementById("editMobile").value = data.mobile || "";
        document.getElementById("editAddress").value = data.address || "";
        document.getElementById("editPincode").value = data.pincode || "";
        document.getElementById("editCity").value = data.city || "";
        document.getElementById("editDistrict").value = data.district || "";
        document.getElementById("editState").value = data.state || "";
        document.getElementById("editIsDefault").checked = data.isDefault || false;
        
        const form = document.getElementById('editAddressForm');
        form.querySelectorAll('.is-invalid').forEach(field => {
          field.classList.remove('is-invalid');
        });
        form.querySelectorAll('.invalid-feedback').forEach(feedback => {
          feedback.textContent = '';
        });
        
        const modal = new bootstrap.Modal(document.getElementById("editAddressModal"));
        modal.show();
        
      } catch (error) {
        console.error("Failed to load address data:", error);
        
        Swal.fire({
          title: 'Error!',
          text: 'Failed to load address data. Please try again.',
          icon: 'error',
          confirmButtonColor: '#ef4444'
        });
      }
    }

    document.getElementById('updateAddressBtn').addEventListener('click', async () => {
      const form = document.getElementById('editAddressForm');
      const updateBtn = document.getElementById('updateAddressBtn');
      
      if (!validateForm(form)) {
        return;
      }
      
      const addressId = document.getElementById('editAddressId').value;
      const formData = {
        name: document.getElementById('editName').value.trim(),
        mobile: document.getElementById('editMobile').value.trim(),
        address: document.getElementById('editAddress').value.trim(),
        pincode: document.getElementById('editPincode').value.trim(),
        city: document.getElementById('editCity').value.trim(),
        district: document.getElementById('editDistrict').value.trim(),
        state: document.getElementById('editState').value.trim(),
        isDefault: document.getElementById('editIsDefault').checked
      };
      
      try {
        setButtonLoading(updateBtn, true);
        
        const response = await fetch(`/address/${addressId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(formData),
        });
        
        const data = await response.json();
        
        if (data.success) {
          const modal = bootstrap.Modal.getInstance(document.getElementById('editAddressModal'));
          modal.hide();
          
          await Swal.fire({
            title: 'Success!',
            text: 'Address updated successfully',
            icon: 'success',
            confirmButtonColor: '#28a745'
          });
          
          location.reload();
        } else {
          throw new Error(data.message || 'Failed to update address');
        }
      } catch (error) {
        console.error('Update failed:', error);
        
        Swal.fire({
          title: 'Error!',
          text: error.message || 'Something went wrong while updating the address.',
          icon: 'error',
          confirmButtonColor: '#ef4444'
        });
      } finally {
        setButtonLoading(updateBtn, false);
        updateBtn.innerHTML = '<i class="fas fa-save"></i> Update Address';
      }
    });

    async function setDefaultAddress(event, addressId) {
      event.preventDefault();
      
      const result = await Swal.fire({
        title: 'Set Default Address?',
        text: 'This will become your default delivery address.',
        icon: 'question',
        showCancelButton: true,
        confirmButtonColor: '#fca120',
        cancelButtonColor: '#6c757d',
        confirmButtonText: 'Yes, Set as Default',
        cancelButtonText: 'Cancel'
      });

      if (result.isConfirmed) {
        try {
          const response = await fetch(`/address/${addressId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ isDefault: true }),
          });

          const data = await response.json();

          if (data.success) {
            await Swal.fire({
              title: 'Success!',
              text: 'Default address updated successfully',
              icon: 'success',
              confirmButtonColor: '#28a745'
            });
            location.reload();
          } else {
            throw new Error(data.message || 'Failed to set default address');
          }
        } catch (error) {
          await Swal.fire({
            title: 'Error!',
            text: error.message || 'Something went wrong while setting default address.',
            icon: 'error',
            confirmButtonColor: '#ef4444'
          });
        }
      }
    }

    async function deleteAddress(event, addressId) {
      event.preventDefault();
      
      const result = await Swal.fire({
        title: 'Delete Address?',
        text: 'Are you sure you want to delete this address? This action cannot be undone.',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#ef4444',
        cancelButtonColor: '#6c757d',
        confirmButtonText: 'Yes, Delete',
        cancelButtonText: 'Cancel',
        reverseButtons: true
      });

      if (result.isConfirmed) {
        try {
          const response = await fetch(`/address/${addressId}`, {
            method: 'DELETE',
            headers: {
              'Content-Type': 'application/json',
            }
          });

          const data = await response.json();

          if (data.success) {
            await Swal.fire({
              title: 'Deleted!',
              text: data.message,
              icon: 'success',
              confirmButtonColor: '#28a745'
            });
            location.reload();
          } else {
            throw new Error(data.message || 'Failed to delete address');
          }
        } catch (error) {
          await Swal.fire({
            title: 'Error!',
            text: error.message || 'Something went wrong while deleting the address.',
            icon: 'error',
            confirmButtonColor: '#ef4444'
          });
        }
      }
    }

    document.addEventListener('DOMContentLoaded', function() {
      const form = document.getElementById('editAddressForm');
      if (form) {
        const inputs = form.querySelectorAll('input, textarea');
        
        inputs.forEach(input => {
          input.addEventListener('blur', function() {
            if (this.hasAttribute('required') || this.value.trim()) {
              validateSingleField(this);
            }
          });
          
          input.addEventListener('input', function() {
            if (this.classList.contains('is-invalid')) {
              validateSingleField(this);
            }
          });
        });
      }
    });

    function validateSingleField(field) {
      const value = field.value.trim();
      field.classList.remove('is-invalid');
      
      const feedback = field.nextElementSibling;
      if (feedback && feedback.classList.contains('invalid-feedback')) {
        feedback.textContent = '';
      }
      
      if (field.hasAttribute('required') && !value) {
        showFieldError(field, 'This field is required');
        return false;
      }
      
      if (field.name === 'mobile' && value && !/^[0-9]{10}$/.test(value)) {
        showFieldError(field, 'Please enter a valid 10-digit mobile number');
        return false;
      }
      
      if (field.name === 'pincode' && value && !/^[0-9]{6}$/.test(value)) {
        showFieldError(field, 'Please enter a valid 6-digit pincode');
        return false;
      }
      
      return true;
    }

    async function copyAddress(addressId) {
      try {
        const addressCard = document.querySelector(`[data-address-id="${addressId}"]`);
        if (!addressCard) return;

        const nameText = addressCard.querySelector('.name-text').textContent;
        const addressText = addressCard.querySelector('.address-text').textContent;
        const phoneElement = addressCard.querySelector('.address-field i.fa-phone');
        const phoneText = phoneElement ? phoneElement.nextElementSibling.textContent : '';

        let fullAddress = `${nameText}\n${addressText}`;
        if (phoneText) {
          fullAddress += `\nPhone: ${phoneText}`;
        }

        if (navigator.clipboard && window.isSecureContext) {
          await navigator.clipboard.writeText(fullAddress);
        } else {
          const textArea = document.createElement('textarea');
          textArea.value = fullAddress;
          textArea.style.position = 'fixed';
          textArea.style.left = '-999999px';
          textArea.style.top = '-999999px';
          document.body.appendChild(textArea);
          textArea.focus();
          textArea.select();
          document.execCommand('copy');
          textArea.remove();
        }

        Swal.fire({
          title: 'Copied!',
          text: 'Address copied to clipboard',
          icon: 'success',
          timer: 2000,
          showConfirmButton: false,
          toast: true,
          position: 'top-end'
        });

      } catch (error) {
        console.error('Failed to copy address:', error);
        Swal.fire({
          title: 'Error!',
          text: 'Failed to copy address to clipboard',
          icon: 'error',
          confirmButtonColor: '#ef4444'
        });
      }
    }

    function closeAlert(alertId) {
      const alert = document.getElementById(alertId);
      if (alert) {
        alert.style.opacity = '0';
        alert.style.transform = 'translateY(-10px)';
        setTimeout(() => {
          alert.remove();
        }, 300);
      }
    }

    document.addEventListener('DOMContentLoaded', function() {
      const alerts = document.querySelectorAll('.alert');
      alerts.forEach(alert => {
        setTimeout(() => {
          if (alert.parentNode) {
            closeAlert(alert.id);
          }
        }, 5000);
      });

      alerts.forEach(alert => {
        alert.style.transition = 'all 0.3s ease';
      });
    });

    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape') {
        const modal = bootstrap.Modal.getInstance(document.getElementById('editAddressModal'));
        if (modal) {
          modal.hide();
        }
      }
    });

    window.addEventListener('load', function() {
      document.body.classList.add('loaded');
    });
  </script>

  <style>
    body {
      opacity: 0;
      transition: opacity 0.3s ease;
    }

    body.loaded {
      opacity: 1;
    }

    .alert {
      transition: all 0.3s ease;
    }

    .action-btn:focus,
    .quick-action-btn:focus,
    .btn:focus {
      outline: 2px solid #fca120;
      outline-offset: 2px;
    }

    .address-card:hover .address-actions .action-btn {
      opacity: 1;
      visibility: visible;
    }

    .address-actions .action-btn {
      opacity: 0.7;
      transition: all 0.3s ease;
    }

    html {
      scroll-behavior: smooth;
    }

    @media print {
      .address-actions,
      .address-footer,
      .page-header .btn-primary,
      .alert {
        display: none !important;
      }

      .address-card {
        break-inside: avoid;
        box-shadow: none;
        border: 1px solid #ddd;
      }
    }
  </style>

</body>
</html>