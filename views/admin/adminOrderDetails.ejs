<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Order Details</title>
  <link rel="stylesheet" href="/css/admin/profileOrders.css">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    .order-status-section {
      margin: 1rem 0;
      padding: 1rem;
      background: #f8f9fa;
      border-radius: 8px;
      border-left: 4px solid #fca120;
    }

    .order-status-update {
      display: flex;
      align-items: center;
      gap: 1rem;
      margin-top: 0.75rem;
    }

    .order-status-dropdown {
      padding: 0.5rem;
      border: 2px solid #e5e7eb;
      border-radius: 6px;
      font-size: 0.9rem;
      background: white;
      min-width: 200px;
      transition: border-color 0.3s ease;
    }

    .order-status-dropdown:focus {
      outline: none;
      border-color: #fca120;
      box-shadow: 0 0 0 3px rgba(252, 161, 32, 0.1);
    }

    .update-order-status-btn {
      padding: 0.5rem 1rem;
      background: #6c757d;
      color: white;
      border: none;
      border-radius: 6px;
      font-size: 0.9rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .update-order-status-btn:enabled.enabled {
      background: #fca120;
      box-shadow: 0 2px 8px rgba(252, 161, 32, 0.3);
    }

    .update-order-status-btn:enabled.enabled:hover {
      background: #e8940f;
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(252, 161, 32, 0.4);
    }

    .update-order-status-btn:disabled {
      cursor: not-allowed;
      opacity: 0.6;
    }

    .final-status-notice {
      color: #6c757d;
      font-style: italic;
      margin-top: 0.5rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .order-status-info {
      color: #495057;
      margin-top: 0.5rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      font-size: 0.9rem;
    }

    .order-status-info a {
      color: #fca120;
      text-decoration: none;
      font-weight: 600;
    }

    .order-status-info a:hover {
      color: #e8940f;
      text-decoration: underline;
    }

    .status-badge {
      padding: 0.375rem 0.75rem;
      border-radius: 20px;
      font-size: 0.8rem;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .status-badge.status-pending {
      background: #fff3cd;
      color: #856404;
      border: 1px solid #ffeaa7;
    }

    .status-badge.status-processing {
      background: #cce5ff;
      color: #004085;
      border: 1px solid #99d3ff;
    }

    .status-badge.status-shipped {
      background: #d4edda;
      color: #155724;
      border: 1px solid #a3d9a5;
    }

    .status-badge.status-out-for-delivery {
      background: #e2e3e5;
      color: #383d41;
      border: 1px solid #c6c8ca;
    }

    .status-badge.status-delivered {
      background: #d1ecf1;
      color: #0c5460;
      border: 1px solid #a2d2db;
    }

    .status-badge.status-cancelled {
      background: #f8d7da;
      color: #721c24;
      border: 1px solid #f1aeb5;
    }

    .status-badge.status-returned {
      background: #fce4ec;
      color: #c2185b;
      border: 1px solid #f8bbd9;
    }
  </style>
</head>
<body>
  <%- include('../partials/admin/navbar') %>
  <div class="view-order-container">
    <div class="view-order-container">
      <h2 class="view-order-title">Order Details - <%= order._id %></h2>
      
      <div class="view-order-info">
        <p><strong>Customer:</strong> <%= order.userId.fullName || order.userId.email %></p>
        <p><strong>Date:</strong> <%= order.createdAt.toDateString() %></p>
        <p><strong>Payment Method:</strong> 
          <% if (order.paymentMethod === 'Online') { %>
            Razorpay
          <% } else if (order.paymentMethod === 'COD') { %>
            Cash on Delivery
          <% } else if (order.paymentMethod === 'Wallet') { %>
            Wallet
          <% } else { %>
            <%= order.paymentMethod || 'Unknown' %>
          <% } %>
        </p>
        <div class="order-status-section">
          <p><strong>Status:</strong> 
            <span class="status-badge status-<%= order.status.toLowerCase().replace(/\s+/g, '-') %>">
              <%= order.status %>
            </span>
          </p>
          <% const isFinalOrderStatus = ['Delivered', 'Returned', 'Cancelled'].includes(order.status); %>
          <% if (isFinalOrderStatus) { %>
            <p class="final-status-notice">
              <i class="fas fa-lock"></i> Order status is final and cannot be changed
            </p>
          <% } else { %>
            <p class="order-status-info">
              <i class="fas fa-info-circle"></i> Update order status from the <a href="/admin/orders">Orders Listing page</a>
            </p>
          <% } %>
        </div>
        <p><strong>Total:</strong> ₹<%= order.totalAmount.toFixed(2) %></p>
      </div>

      <h3>Items:</h3>
      <table class="items-table">
        <thead>
          <tr>
            <th>Product</th>
            <th>Image</th>
            <th>Quantity</th>
            <th>Price</th>
            <th>Current Status</th>
            <th>Update Status</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <% order.items.forEach(item => { %>
            <% const itemStatus = item.status || 'Placed'; %>
            <% const isFinalStatus = ['Delivered', 'Returned', 'Cancelled'].includes(itemStatus); %>
            <tr data-item-id="<%= item._id %>">
              <td>
                <% 
                  let productName = 'Deleted Product';
                  if (item.productId && item.productId.name) {
                    productName = item.productId.name;
                  } else if (item.name) {
                    productName = item.name;
                  }
                %>
                <%= productName %>
              </td>
              <td>
                <% if (item.productId?.mainImage?.[0]) { %>
                  <img src="<%= item.productId.mainImage %>" alt="Product" width="60">
                <% } else { %>
                  <em>No image</em>
                <% } %>
              </td>
              <td><%= item.quantity %></td>
              <td>₹<%= item.salesPrice.toFixed(2) %></td>
              <td>
                <span class="status-badge status-<%= itemStatus.toLowerCase().replace(/\s+/g, '-') %>">
                  <%= itemStatus %>
                </span>
                <% if (item.deliveredAt) { %>
                  <br><small class="status-timestamp">Delivered: <%= item.deliveredAt.toDateString() %></small>
                <% } %>
                <% if (item.cancelledAt) { %>
                  <br><small class="status-timestamp">Cancelled: <%= item.cancelledAt.toDateString() %></small>
                <% } %>
                <% if (item.returnRequestedAt) { %>
                  <br><small class="status-timestamp">Return Requested: <%= item.returnRequestedAt.toDateString() %></small>
                <% } %>
              </td>
              <td>
                <% if (!isFinalStatus) { %>
                  <div class="status-update-container">
                    <select class="status-dropdown" data-item-id="<%= item._id %>" data-current-status="<%= itemStatus %>">
                      <option value="">Select Status</option>
                      <% 
                        const statusOptions = ['Placed', 'Ordered', 'Processing', 'Shipped', 'Out for Delivery', 'Delivered', 'Cancelled'];
                        const currentIndex = statusOptions.indexOf(itemStatus);
                        statusOptions.forEach((status, index) => {
                          // Only show valid next statuses
                          if (status === itemStatus || 
                              (status === 'Cancelled') || 
                              (currentIndex < statusOptions.indexOf('Delivered') && index > currentIndex && status !== 'Cancelled')) {
                      %>
                        <option value="<%= status %>" <%= status === itemStatus ? 'selected' : '' %>>
                          <%= status %>
                        </option>
                      <% 
                          }
                        });
                      %>
                    </select>
                  </div>
                <% } else { %>
                  <span class="final-status-text">Final Status</span>
                <% } %>
              </td>
              <td>
                <% if (!isFinalStatus) { %>
                  <button class="update-status-btn" 
                          data-order-id="<%= order._id %>" 
                          data-item-id="<%= item._id %>"
                          disabled>
                    Update
                  </button>
                <% } else { %>
                  <span class="no-action">-</span>
                <% } %>
              </td>
            </tr>
          <% }) %>
        </tbody>
      </table>
      <a href="/admin/orders/<%= order._id %>/invoice" class="invoice-btn">Download Invoice</a>
      <a href="/admin/orders" class="back-btn" style="margin-top: 20px;">Back to Orders</a>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // Status validation rules
      const statusTransitions = {
        'Placed': ['Ordered', 'Processing', 'Shipped', 'Cancelled'],
        'Ordered': ['Processing', 'Shipped', 'Cancelled'],
        'Processing': ['Shipped', 'Cancelled'],
        'Shipped': ['Out for Delivery', 'Delivered', 'Cancelled'],
        'Out for Delivery': ['Delivered', 'Cancelled'],
        'Delivered': [], // Final status
        'Cancelled': [], // Final status
        'Return Requested': ['Returned', 'Return Declined'],
        'Returned': [], // Final status
        'Return Declined': []
      };

      // Order-level status updates are now handled from the Orders Listing page

      // Function to validate status transition
      function isValidTransition(currentStatus, newStatus) {
        if (currentStatus === newStatus) return false; // No change
        if (newStatus === 'Cancelled') return true; // Can always cancel (except final states)
        return statusTransitions[currentStatus]?.includes(newStatus) || false;
      }

      // Handle dropdown changes
      document.querySelectorAll('.status-dropdown').forEach(dropdown => {
        dropdown.addEventListener('change', function() {
          const itemId = this.getAttribute('data-item-id');
          const currentStatus = this.getAttribute('data-current-status');
          const newStatus = this.value;
          const updateBtn = document.querySelector(`button[data-item-id="${itemId}"]`);
          
          if (newStatus && newStatus !== currentStatus) {
            if (isValidTransition(currentStatus, newStatus)) {
              updateBtn.disabled = false;
              updateBtn.classList.add('enabled');
            } else {
              updateBtn.disabled = true;
              updateBtn.classList.remove('enabled');
              Swal.fire({
                icon: 'warning',
                title: 'Invalid Transition',
                text: `Invalid status transition from "${currentStatus}" to "${newStatus}"`,
                confirmButtonText: 'OK',
                confirmButtonColor: '#ffc107'
              });
              this.value = currentStatus; // Reset to current status
            }
          } else {
            updateBtn.disabled = true;
            updateBtn.classList.remove('enabled');
          }
        });
      });

      // Handle update button clicks
      document.querySelectorAll('.update-status-btn').forEach(button => {
        button.addEventListener('click', async function() {
          const orderId = this.getAttribute('data-order-id');
          const itemId = this.getAttribute('data-item-id');
          const dropdown = document.querySelector(`select[data-item-id="${itemId}"]`);
          const newStatus = dropdown.value;
          const currentStatus = dropdown.getAttribute('data-current-status');
          
          if (!newStatus || newStatus === currentStatus) {
            Swal.fire({
              icon: 'warning',
              title: 'Status Selection',
              text: 'Please select a different status',
              confirmButtonText: 'OK',
              confirmButtonColor: '#ffc107'
            });
            return;
          }

          // Confirm the status change
          const confirmed = confirm(`Change item status from "${currentStatus}" to "${newStatus}"?`);
          if (!confirmed) return;

          // Disable button during request
          this.disabled = true;
          this.textContent = 'Updating...';

          try {
            const response = await fetch(`/admin/orders/${orderId}/items/${itemId}/status`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ status: newStatus })
            });

            const data = await response.json();
            
            if (data.success) {
              // Show success message
              const successMsg = document.createElement('div');
              successMsg.className = 'success-message';
              successMsg.textContent = `Item status updated to "${newStatus}" successfully!`;
              successMsg.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: #4caf50;
                color: white;
                padding: 12px 20px;
                border-radius: 4px;
                z-index: 1000;
                box-shadow: 0 2px 8px rgba(0,0,0,0.2);
              `;
              document.body.appendChild(successMsg);
              
              // Remove message after 3 seconds
              setTimeout(() => {
                successMsg.remove();
              }, 3000);

              // Reload the page to show updated status
              setTimeout(() => {
                window.location.reload();
              }, 1500);
            } else {
              Swal.fire({
                icon: 'error',
                title: 'Update Failed',
                text: 'Failed to update item status: ' + (data.message || 'Unknown error'),
                confirmButtonText: 'OK',
                confirmButtonColor: '#d33'
              });
              this.disabled = false;
              this.textContent = 'Update';
            }
          } catch (error) {
            console.error('Error updating item status:', error);
            Swal.fire({
              icon: 'error',
              title: 'Update Error',
              text: 'An error occurred while updating the item status.',
              confirmButtonText: 'OK',
              confirmButtonColor: '#d33'
            });
            this.disabled = false;
            this.textContent = 'Update';
          }
        });
      });

      // Handle legacy mark as delivered buttons (if any exist)
      document.querySelectorAll('.mark-delivered-btn').forEach(button => {
        button.addEventListener('click', async function() {
          const orderId = this.getAttribute('data-order-id');
          const itemId = this.getAttribute('data-item-id');
          
          const confirmed = confirm('Mark this item as delivered?');
          if (!confirmed) return;

          try {
            const response = await fetch(`/admin/orders/${orderId}/items/${itemId}/status`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ status: 'Delivered' })
            });

            const data = await response.json();
            
            if (data.success) {
              Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'Item marked as delivered successfully!',
                timer: 2000,
                timerProgressBar: true,
                showConfirmButton: false
              });
              window.location.reload();
            } else {
              Swal.fire({
                icon: 'error',
                title: 'Update Failed',
                text: 'Failed to update item status: ' + (data.message || 'Unknown error'),
                confirmButtonText: 'OK',
                confirmButtonColor: '#d33'
              });
            }
          } catch (error) {
            console.error('Error updating item status:', error);
            Swal.fire({
              icon: 'error',
              title: 'Update Error',
              text: 'An error occurred while updating the item status.',
              confirmButtonText: 'OK',
              confirmButtonColor: '#d33'
            });
          }
        });
      });
    });
  </script>
</body>
</html>